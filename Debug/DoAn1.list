
DoAn1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004cb0  08004cb0  00005cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d74  08004d74  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d7c  08004d7c  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d7c  08004d7c  00005d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d80  08004d80  00005d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08004d84  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000607c  2**0
                  CONTENTS
 10 .bss          000012f8  2000007c  2000007c  0000607c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001374  20001374  0000607c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a911  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b2a  00000000  00000000  000109bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  000124e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069a  00000000  00000000  00012d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff76  00000000  00000000  00013422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a674  00000000  00000000  00033398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c41b4  00000000  00000000  0003da0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00101bc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027f4  00000000  00000000  00101c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001043f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c98 	.word	0x08004c98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004c98 	.word	0x08004c98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 ffe0 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f83e 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f9a0 	bl	80008b0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000570:	f000 f8a4 	bl	80006bc <MX_CAN1_Init>
  MX_CAN2_Init();
 8000574:	f000 f90a 	bl	800078c <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000578:	f000 f970 	bl	800085c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 800057c:	f000 fafe 	bl	8000b7c <MX_CAN1_Setup>
  MX_CAN2_Setup();
 8000580:	f000 fb10 	bl	8000ba4 <MX_CAN2_Setup>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000584:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <main+0x68>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	68da      	ldr	r2, [r3, #12]
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <main+0x68>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f042 0220 	orr.w	r2, r2, #32
 8000592:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CAN_Tx(&hcan2, CAN2_DATA_RX, CAN2_DATA_TX);
 8000594:	4a0d      	ldr	r2, [pc, #52]	@ (80005cc <main+0x6c>)
 8000596:	490e      	ldr	r1, [pc, #56]	@ (80005d0 <main+0x70>)
 8000598:	480e      	ldr	r0, [pc, #56]	@ (80005d4 <main+0x74>)
 800059a:	f000 fc37 	bl	8000e0c <CAN_Tx>
	  delay(2000);
 800059e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005a2:	f000 fbdb 	bl	8000d5c <delay>
	  CAN_Tx(&hcan1, CAN1_DATA_RX, CAN1_DATA_TX);
 80005a6:	4a0c      	ldr	r2, [pc, #48]	@ (80005d8 <main+0x78>)
 80005a8:	490c      	ldr	r1, [pc, #48]	@ (80005dc <main+0x7c>)
 80005aa:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <main+0x80>)
 80005ac:	f000 fc2e 	bl	8000e0c <CAN_Tx>
	  delay(1990);
 80005b0:	f240 70c6 	movw	r0, #1990	@ 0x7c6
 80005b4:	f000 fbd2 	bl	8000d5c <delay>
	  MessageCounter = MessageCounter + 1;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <main+0x84>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <main+0x84>)
 80005c2:	701a      	strb	r2, [r3, #0]
	  CAN_Tx(&hcan2, CAN2_DATA_RX, CAN2_DATA_TX);
 80005c4:	bf00      	nop
 80005c6:	e7e5      	b.n	8000594 <main+0x34>
 80005c8:	200000e8 	.word	0x200000e8
 80005cc:	20001208 	.word	0x20001208
 80005d0:	20001210 	.word	0x20001210
 80005d4:	200000c0 	.word	0x200000c0
 80005d8:	200011f8 	.word	0x200011f8
 80005dc:	20001200 	.word	0x20001200
 80005e0:	20000098 	.word	0x20000098
 80005e4:	2000121c 	.word	0x2000121c

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fece 	bl	8004398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800065c:	2360      	movs	r3, #96	@ 0x60
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000660:	2306      	movs	r3, #6
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 f9e3 	bl	8002a38 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 fd40 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000688:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fc44 	bl	8002f28 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a6:	f000 fd29 	bl	80010fc <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	CAN1_pHeader.StdId = 0x12;
 80006c0:	4b2e      	ldr	r3, [pc, #184]	@ (800077c <MX_CAN1_Init+0xc0>)
 80006c2:	2212      	movs	r2, #18
 80006c4:	601a      	str	r2, [r3, #0]
	CAN1_pHeader.DLC = 8;
 80006c6:	4b2d      	ldr	r3, [pc, #180]	@ (800077c <MX_CAN1_Init+0xc0>)
 80006c8:	2208      	movs	r2, #8
 80006ca:	611a      	str	r2, [r3, #16]
	CAN1_pHeader.IDE = CAN_ID_STD;
 80006cc:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <MX_CAN1_Init+0xc0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
	CAN1_pHeader.RTR = CAN_RTR_DATA;
 80006d2:	4b2a      	ldr	r3, [pc, #168]	@ (800077c <MX_CAN1_Init+0xc0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006d8:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <MX_CAN1_Init+0xc4>)
 80006da:	4a2a      	ldr	r2, [pc, #168]	@ (8000784 <MX_CAN1_Init+0xc8>)
 80006dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80006de:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <MX_CAN1_Init+0xc4>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006e4:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <MX_CAN1_Init+0xc4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80006ea:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <MX_CAN1_Init+0xc4>)
 80006ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80006f0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_CAN1_Init+0xc4>)
 80006f4:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80006f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80006fa:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <MX_CAN1_Init+0xc4>)
 80006fc:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000700:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000702:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <MX_CAN1_Init+0xc4>)
 8000704:	2200      	movs	r2, #0
 8000706:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000708:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_CAN1_Init+0xc4>)
 800070a:	2200      	movs	r2, #0
 800070c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800070e:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <MX_CAN1_Init+0xc4>)
 8000710:	2200      	movs	r2, #0
 8000712:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000714:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_CAN1_Init+0xc4>)
 8000716:	2200      	movs	r2, #0
 8000718:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800071a:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_CAN1_Init+0xc4>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <MX_CAN1_Init+0xc4>)
 8000722:	2200      	movs	r2, #0
 8000724:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000726:	4816      	ldr	r0, [pc, #88]	@ (8000780 <MX_CAN1_Init+0xc4>)
 8000728:	f000 ff94 	bl	8001654 <HAL_CAN_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_CAN1_Init+0x7a>
  {
    Error_Handler();
 8000732:	f000 fce3 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN1_sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_CAN1_Init+0xcc>)
 8000738:	2201      	movs	r2, #1
 800073a:	621a      	str	r2, [r3, #32]
  CAN1_sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <MX_CAN1_Init+0xcc>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  CAN1_sFilterConfig.SlaveStartFilterBank = 13;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_CAN1_Init+0xcc>)
 8000744:	220d      	movs	r2, #13
 8000746:	625a      	str	r2, [r3, #36]	@ 0x24
  CAN1_sFilterConfig.FilterBank = 8;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_CAN1_Init+0xcc>)
 800074a:	2208      	movs	r2, #8
 800074c:	615a      	str	r2, [r3, #20]
  CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_CAN1_Init+0xcc>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_CAN1_Init+0xcc>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  CAN1_sFilterConfig.FilterIdHigh = 0x0A2 << 5;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_CAN1_Init+0xcc>)
 800075c:	f44f 52a2 	mov.w	r2, #5184	@ 0x1440
 8000760:	601a      	str	r2, [r3, #0]
  CAN1_sFilterConfig.FilterIdLow = 0;
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_CAN1_Init+0xcc>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  CAN1_sFilterConfig.FilterMaskIdHigh = 0x0A2 << 5;
 8000768:	4b07      	ldr	r3, [pc, #28]	@ (8000788 <MX_CAN1_Init+0xcc>)
 800076a:	f44f 52a2 	mov.w	r2, #5184	@ 0x1440
 800076e:	609a      	str	r2, [r3, #8]
  CAN1_sFilterConfig.FilterMaskIdLow = 0;
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <MX_CAN1_Init+0xcc>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  /* USER CODE END CAN1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000130 	.word	0x20000130
 8000780:	20000098 	.word	0x20000098
 8000784:	40006400 	.word	0x40006400
 8000788:	20000164 	.word	0x20000164

0800078c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN2_Init 0 */
	CAN2_pHeader.StdId = 0xA2;
 8000790:	4b2e      	ldr	r3, [pc, #184]	@ (800084c <MX_CAN2_Init+0xc0>)
 8000792:	22a2      	movs	r2, #162	@ 0xa2
 8000794:	601a      	str	r2, [r3, #0]
	CAN2_pHeader.DLC = 8;
 8000796:	4b2d      	ldr	r3, [pc, #180]	@ (800084c <MX_CAN2_Init+0xc0>)
 8000798:	2208      	movs	r2, #8
 800079a:	611a      	str	r2, [r3, #16]
	CAN2_pHeader.IDE = CAN_ID_STD;
 800079c:	4b2b      	ldr	r3, [pc, #172]	@ (800084c <MX_CAN2_Init+0xc0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
	CAN2_pHeader.RTR = CAN_RTR_DATA;
 80007a2:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <MX_CAN2_Init+0xc0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007aa:	4a2a      	ldr	r2, [pc, #168]	@ (8000854 <MX_CAN2_Init+0xc8>)
 80007ac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 1;
 80007ae:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007b4:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80007ba:	4b25      	ldr	r3, [pc, #148]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80007c0:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80007c2:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007c4:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80007c8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007ca:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007cc:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80007d0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007de:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007f6:	4816      	ldr	r0, [pc, #88]	@ (8000850 <MX_CAN2_Init+0xc4>)
 80007f8:	f000 ff2c 	bl	8001654 <HAL_CAN_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_CAN2_Init+0x7a>
  {
    Error_Handler();
 8000802:	f000 fc7b 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN2_sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_CAN2_Init+0xcc>)
 8000808:	2201      	movs	r2, #1
 800080a:	621a      	str	r2, [r3, #32]
  CAN2_sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_CAN2_Init+0xcc>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  CAN2_sFilterConfig.SlaveStartFilterBank = 13;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_CAN2_Init+0xcc>)
 8000814:	220d      	movs	r2, #13
 8000816:	625a      	str	r2, [r3, #36]	@ 0x24
  CAN2_sFilterConfig.FilterBank = 19;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_CAN2_Init+0xcc>)
 800081a:	2213      	movs	r2, #19
 800081c:	615a      	str	r2, [r3, #20]
  CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_CAN2_Init+0xcc>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_CAN2_Init+0xcc>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  CAN2_sFilterConfig.FilterIdHigh = 0x012 << 5;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_CAN2_Init+0xcc>)
 800082c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000830:	601a      	str	r2, [r3, #0]
  CAN2_sFilterConfig.FilterIdLow = 0;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_CAN2_Init+0xcc>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  CAN2_sFilterConfig.FilterMaskIdHigh = 0x012 << 5;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_CAN2_Init+0xcc>)
 800083a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800083e:	609a      	str	r2, [r3, #8]
  CAN2_sFilterConfig.FilterMaskIdLow = 0;
 8000840:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <MX_CAN2_Init+0xcc>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  /* USER CODE END CAN2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000018c 	.word	0x2000018c
 8000850:	200000c0 	.word	0x200000c0
 8000854:	40006800 	.word	0x40006800
 8000858:	200001c0 	.word	0x200001c0

0800085c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_USART3_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USART3_UART_Init+0x4c>)
 8000894:	f002 fd68 	bl	8003368 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800089e:	f000 fc2d 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000e8 	.word	0x200000e8
 80008ac:	40004800 	.word	0x40004800

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	4ba6      	ldr	r3, [pc, #664]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4aa5      	ldr	r2, [pc, #660]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4ba3      	ldr	r3, [pc, #652]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b9f      	ldr	r3, [pc, #636]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a9e      	ldr	r2, [pc, #632]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b9c      	ldr	r3, [pc, #624]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b98      	ldr	r3, [pc, #608]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a97      	ldr	r2, [pc, #604]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b95      	ldr	r3, [pc, #596]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b91      	ldr	r3, [pc, #580]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a90      	ldr	r2, [pc, #576]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b8e      	ldr	r3, [pc, #568]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b8a      	ldr	r3, [pc, #552]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a89      	ldr	r2, [pc, #548]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b87      	ldr	r3, [pc, #540]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b83      	ldr	r3, [pc, #524]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a82      	ldr	r2, [pc, #520]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b80      	ldr	r3, [pc, #512]	@ (8000b64 <MX_GPIO_Init+0x2b4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2108      	movs	r1, #8
 8000972:	487d      	ldr	r0, [pc, #500]	@ (8000b68 <MX_GPIO_Init+0x2b8>)
 8000974:	f002 f82e 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2101      	movs	r1, #1
 800097c:	487b      	ldr	r0, [pc, #492]	@ (8000b6c <MX_GPIO_Init+0x2bc>)
 800097e:	f002 f829 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000982:	2200      	movs	r2, #0
 8000984:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000988:	4879      	ldr	r0, [pc, #484]	@ (8000b70 <MX_GPIO_Init+0x2c0>)
 800098a:	f002 f823 	bl	80029d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800098e:	2308      	movs	r3, #8
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4870      	ldr	r0, [pc, #448]	@ (8000b68 <MX_GPIO_Init+0x2b8>)
 80009a6:	f001 fe61 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	486a      	ldr	r0, [pc, #424]	@ (8000b6c <MX_GPIO_Init+0x2bc>)
 80009c2:	f001 fe53 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009c6:	2308      	movs	r3, #8
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d6:	2305      	movs	r3, #5
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4862      	ldr	r0, [pc, #392]	@ (8000b6c <MX_GPIO_Init+0x2bc>)
 80009e2:	f001 fe43 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	485e      	ldr	r0, [pc, #376]	@ (8000b74 <MX_GPIO_Init+0x2c4>)
 80009fc:	f001 fe36 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a00:	2310      	movs	r3, #16
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a10:	2306      	movs	r3, #6
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4856      	ldr	r0, [pc, #344]	@ (8000b74 <MX_GPIO_Init+0x2c4>)
 8000a1c:	f001 fe26 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a20:	23e0      	movs	r3, #224	@ 0xe0
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a30:	2305      	movs	r3, #5
 8000a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	484e      	ldr	r0, [pc, #312]	@ (8000b74 <MX_GPIO_Init+0x2c4>)
 8000a3c:	f001 fe16 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a40:	2304      	movs	r3, #4
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4849      	ldr	r0, [pc, #292]	@ (8000b78 <MX_GPIO_Init+0x2c8>)
 8000a54:	f001 fe0a 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4840      	ldr	r0, [pc, #256]	@ (8000b78 <MX_GPIO_Init+0x2c8>)
 8000a76:	f001 fdf9 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a7a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a7e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4837      	ldr	r0, [pc, #220]	@ (8000b70 <MX_GPIO_Init+0x2c0>)
 8000a94:	f001 fdea 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a98:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	482d      	ldr	r0, [pc, #180]	@ (8000b6c <MX_GPIO_Init+0x2bc>)
 8000ab6:	f001 fdd9 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000aba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4829      	ldr	r0, [pc, #164]	@ (8000b74 <MX_GPIO_Init+0x2c4>)
 8000ad0:	f001 fdcc 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ad4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4820      	ldr	r0, [pc, #128]	@ (8000b74 <MX_GPIO_Init+0x2c4>)
 8000af2:	f001 fdbb 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000af6:	2320      	movs	r3, #32
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4819      	ldr	r0, [pc, #100]	@ (8000b70 <MX_GPIO_Init+0x2c0>)
 8000b0a:	f001 fdaf 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b0e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b14:	2312      	movs	r3, #18
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b20:	2304      	movs	r3, #4
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4813      	ldr	r0, [pc, #76]	@ (8000b78 <MX_GPIO_Init+0x2c8>)
 8000b2c:	f001 fd9e 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b34:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4808      	ldr	r0, [pc, #32]	@ (8000b68 <MX_GPIO_Init+0x2b8>)
 8000b46:	f001 fd91 	bl	800266c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	2007      	movs	r0, #7
 8000b50:	f001 fcc3 	bl	80024da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b54:	2007      	movs	r0, #7
 8000b56:	f001 fcdc 	bl	8002512 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3730      	adds	r7, #48	@ 0x30
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020400 	.word	0x40020400

08000b7c <MX_CAN1_Setup>:

/* USER CODE BEGIN 4 */
void MX_CAN1_Setup()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8000b80:	4906      	ldr	r1, [pc, #24]	@ (8000b9c <MX_CAN1_Setup+0x20>)
 8000b82:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <MX_CAN1_Setup+0x24>)
 8000b84:	f000 fe62 	bl	800184c <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_CAN1_Setup+0x24>)
 8000b8a:	f000 ff3f 	bl	8001a0c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <MX_CAN1_Setup+0x24>)
 8000b92:	f001 f971 	bl	8001e78 <HAL_CAN_ActivateNotification>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000164 	.word	0x20000164
 8000ba0:	20000098 	.word	0x20000098

08000ba4 <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8000ba8:	4906      	ldr	r1, [pc, #24]	@ (8000bc4 <MX_CAN2_Setup+0x20>)
 8000baa:	4807      	ldr	r0, [pc, #28]	@ (8000bc8 <MX_CAN2_Setup+0x24>)
 8000bac:	f000 fe4e 	bl	800184c <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8000bb0:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_CAN2_Setup+0x24>)
 8000bb2:	f000 ff2b 	bl	8001a0c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <MX_CAN2_Setup+0x24>)
 8000bba:	f001 f95d 	bl	8001e78 <HAL_CAN_ActivateNotification>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200001c0 	.word	0x200001c0
 8000bc8:	200000c0 	.word	0x200000c0

08000bcc <USART3_SendString>:

void USART3_SendString(uint8_t *ch)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
   while(*ch!=0)
 8000bd4:	e009      	b.n	8000bea <USART3_SendString+0x1e>
   {
      HAL_UART_Transmit(&huart3, ch, 1,HAL_MAX_DELAY);
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	2201      	movs	r2, #1
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	4807      	ldr	r0, [pc, #28]	@ (8000bfc <USART3_SendString+0x30>)
 8000be0:	f002 fc12 	bl	8003408 <HAL_UART_Transmit>
      ch++;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3301      	adds	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
   while(*ch!=0)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f1      	bne.n	8000bd6 <USART3_SendString+0xa>
   }
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000e8 	.word	0x200000e8

08000c00 <PrintCANLog>:
void PrintCANLog(uint16_t CAN_ID, uint8_t * CAN_Frame)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	80fb      	strh	r3, [r7, #6]
	uint16_t loopIndx = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	83fb      	strh	r3, [r7, #30]
	char bufID[3] = "   ";
 8000c10:	4a3b      	ldr	r2, [pc, #236]	@ (8000d00 <PrintCANLog+0x100>)
 8000c12:	f107 0318 	add.w	r3, r7, #24
 8000c16:	6812      	ldr	r2, [r2, #0]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	8019      	strh	r1, [r3, #0]
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	0c12      	lsrs	r2, r2, #16
 8000c20:	701a      	strb	r2, [r3, #0]
	char bufDat[2] = "  ";
 8000c22:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000c26:	82bb      	strh	r3, [r7, #20]
	char bufTime [8]="        ";
 8000c28:	4a36      	ldr	r2, [pc, #216]	@ (8000d04 <PrintCANLog+0x104>)
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c32:	e883 0003 	stmia.w	r3, {r0, r1}

	sprintf(bufTime,"%d",TimeStamp);
 8000c36:	4b34      	ldr	r3, [pc, #208]	@ (8000d08 <PrintCANLog+0x108>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4933      	ldr	r1, [pc, #204]	@ (8000d0c <PrintCANLog+0x10c>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 fb89 	bl	8004358 <siprintf>
	USART3_SendString((uint8_t*)bufTime);
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ffbe 	bl	8000bcc <USART3_SendString>
	USART3_SendString((uint8_t*)" ");
 8000c50:	482f      	ldr	r0, [pc, #188]	@ (8000d10 <PrintCANLog+0x110>)
 8000c52:	f7ff ffbb 	bl	8000bcc <USART3_SendString>

	sprintf(bufID,"%03X",CAN_ID);
 8000c56:	88fa      	ldrh	r2, [r7, #6]
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	492d      	ldr	r1, [pc, #180]	@ (8000d14 <PrintCANLog+0x114>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fb7a 	bl	8004358 <siprintf>
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	83fb      	strh	r3, [r7, #30]
 8000c68:	e00a      	b.n	8000c80 <PrintCANLog+0x80>
	{
		bufsend[loopIndx]  = bufID[loopIndx];
 8000c6a:	8bfa      	ldrh	r2, [r7, #30]
 8000c6c:	8bfb      	ldrh	r3, [r7, #30]
 8000c6e:	3220      	adds	r2, #32
 8000c70:	443a      	add	r2, r7
 8000c72:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8000c76:	4a28      	ldr	r2, [pc, #160]	@ (8000d18 <PrintCANLog+0x118>)
 8000c78:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8000c7a:	8bfb      	ldrh	r3, [r7, #30]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	83fb      	strh	r3, [r7, #30]
 8000c80:	8bfb      	ldrh	r3, [r7, #30]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d9f1      	bls.n	8000c6a <PrintCANLog+0x6a>
	}
	bufsend[3] = ':';
 8000c86:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <PrintCANLog+0x118>)
 8000c88:	223a      	movs	r2, #58	@ 0x3a
 8000c8a:	70da      	strb	r2, [r3, #3]
	bufsend[4] = ' ';
 8000c8c:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <PrintCANLog+0x118>)
 8000c8e:	2220      	movs	r2, #32
 8000c90:	711a      	strb	r2, [r3, #4]

	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000c92:	2300      	movs	r3, #0
 8000c94:	83fb      	strh	r3, [r7, #30]
 8000c96:	e025      	b.n	8000ce4 <PrintCANLog+0xe4>
	{
		sprintf(bufDat,"%02X",CAN_Frame[loopIndx]);
 8000c98:	8bfb      	ldrh	r3, [r7, #30]
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	491d      	ldr	r1, [pc, #116]	@ (8000d1c <PrintCANLog+0x11c>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f003 fb55 	bl	8004358 <siprintf>
		bufsend[loopIndx*3 + 5] = bufDat[0];
 8000cae:	8bfa      	ldrh	r2, [r7, #30]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3305      	adds	r3, #5
 8000cb8:	7d39      	ldrb	r1, [r7, #20]
 8000cba:	4a17      	ldr	r2, [pc, #92]	@ (8000d18 <PrintCANLog+0x118>)
 8000cbc:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 6] = bufDat[1];
 8000cbe:	8bfa      	ldrh	r2, [r7, #30]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3306      	adds	r3, #6
 8000cc8:	7d79      	ldrb	r1, [r7, #21]
 8000cca:	4a13      	ldr	r2, [pc, #76]	@ (8000d18 <PrintCANLog+0x118>)
 8000ccc:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 7] = ' ';
 8000cce:	8bfa      	ldrh	r2, [r7, #30]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3307      	adds	r3, #7
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d18 <PrintCANLog+0x118>)
 8000cda:	2120      	movs	r1, #32
 8000cdc:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000cde:	8bfb      	ldrh	r3, [r7, #30]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	83fb      	strh	r3, [r7, #30]
 8000ce4:	8bfb      	ldrh	r3, [r7, #30]
 8000ce6:	2b07      	cmp	r3, #7
 8000ce8:	d9d6      	bls.n	8000c98 <PrintCANLog+0x98>
	}
	bufsend[29] = '\n';
 8000cea:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <PrintCANLog+0x118>)
 8000cec:	220a      	movs	r2, #10
 8000cee:	775a      	strb	r2, [r3, #29]
	USART3_SendString((unsigned char*)bufsend);
 8000cf0:	4809      	ldr	r0, [pc, #36]	@ (8000d18 <PrintCANLog+0x118>)
 8000cf2:	f7ff ff6b 	bl	8000bcc <USART3_SendString>
}
 8000cf6:	bf00      	nop
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	08004cc8 	.word	0x08004cc8
 8000d04:	08004ccc 	.word	0x08004ccc
 8000d08:	20001218 	.word	0x20001218
 8000d0c:	08004cb0 	.word	0x08004cb0
 8000d10:	08004cb4 	.word	0x08004cb4
 8000d14:	08004cb8 	.word	0x08004cb8
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	08004cc0 	.word	0x08004cc0

08000d20 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 8000d28:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <HAL_UART_RxCpltCallback+0x30>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_UART_RxCpltCallback+0x34>)
 8000d30:	7819      	ldrb	r1, [r3, #0]
 8000d32:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <HAL_UART_RxCpltCallback+0x38>)
 8000d34:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_UART_RxCpltCallback+0x30>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <HAL_UART_RxCpltCallback+0x30>)
 8000d40:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	200001f0 	.word	0x200001f0
 8000d54:	200011f4 	.word	0x200011f4
 8000d58:	200001f4 	.word	0x200001f4

08000d5c <delay>:
void delay(uint16_t delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay);
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fc4f 	bl	800160c <HAL_Delay>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <calc_SAE_J1850>:
uint8_t calc_SAE_J1850(uint8_t data[], uint8_t crc_len, uint8_t check)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b085      	sub	sp, #20
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	70fb      	strb	r3, [r7, #3]
 8000d82:	4613      	mov	r3, r2
 8000d84:	70bb      	strb	r3, [r7, #2]
    uint8_t idx, crc, temp1, temp2, idy;
    crc = check;
 8000d86:	78bb      	ldrb	r3, [r7, #2]
 8000d88:	73bb      	strb	r3, [r7, #14]
    idx = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
    idy = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	733b      	strb	r3, [r7, #12]
    temp1 = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	737b      	strb	r3, [r7, #13]
    temp2 = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	72fb      	strb	r3, [r7, #11]
    for(idx=0;idx < crc_len+1;idx++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e02a      	b.n	8000df6 <calc_SAE_J1850+0x80>
    {
        if(idx == 0)
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <calc_SAE_J1850+0x36>
        {
            temp1 = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	737b      	strb	r3, [r7, #13]
 8000daa:	e007      	b.n	8000dbc <calc_SAE_J1850+0x46>
        }
        else
        {
            temp1 = data[crc_len-idx];
 8000dac:	78fa      	ldrb	r2, [r7, #3]
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	737b      	strb	r3, [r7, #13]
        }
        crc = (crc^temp1);
 8000dbc:	7bba      	ldrb	r2, [r7, #14]
 8000dbe:	7b7b      	ldrb	r3, [r7, #13]
 8000dc0:	4053      	eors	r3, r2
 8000dc2:	73bb      	strb	r3, [r7, #14]
        for(idy=(uint8_t)8; idy>0; idy--)
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	733b      	strb	r3, [r7, #12]
 8000dc8:	e00f      	b.n	8000dea <calc_SAE_J1850+0x74>
        {
            // Save the value before the top bit is shifted out.
            temp2 = crc;
 8000dca:	7bbb      	ldrb	r3, [r7, #14]
 8000dcc:	72fb      	strb	r3, [r7, #11]
            crc <<= 1;
 8000dce:	7bbb      	ldrb	r3, [r7, #14]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	73bb      	strb	r3, [r7, #14]
            if (0 != (temp2 & (uint8_t)128))
 8000dd4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	da03      	bge.n	8000de4 <calc_SAE_J1850+0x6e>
                crc ^= 0x1D;
 8000ddc:	7bbb      	ldrb	r3, [r7, #14]
 8000dde:	f083 031d 	eor.w	r3, r3, #29
 8000de2:	73bb      	strb	r3, [r7, #14]
        for(idy=(uint8_t)8; idy>0; idy--)
 8000de4:	7b3b      	ldrb	r3, [r7, #12]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	733b      	strb	r3, [r7, #12]
 8000dea:	7b3b      	ldrb	r3, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1ec      	bne.n	8000dca <calc_SAE_J1850+0x54>
    for(idx=0;idx < crc_len+1;idx++)
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	3301      	adds	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	78fa      	ldrb	r2, [r7, #3]
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d2d0      	bcs.n	8000da0 <calc_SAE_J1850+0x2a>
        }
    }
    return crc;
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <CAN_Tx>:
void CAN_Tx(CAN_HandleTypeDef *hcan, uint8_t *data_rx, uint8_t *data_tx){
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b089      	sub	sp, #36	@ 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]

	if(flagCAN2Rx == 1){
 8000e18:	4b4d      	ldr	r3, [pc, #308]	@ (8000f50 <CAN_Tx+0x144>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d108      	bne.n	8000e32 <CAN_Tx+0x26>
		memcpy(CAN2_DATA_RX, CAN1_DATA_TX, 8*sizeof(uint8_t));
 8000e20:	4b4c      	ldr	r3, [pc, #304]	@ (8000f54 <CAN_Tx+0x148>)
 8000e22:	4a4d      	ldr	r2, [pc, #308]	@ (8000f58 <CAN_Tx+0x14c>)
 8000e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e28:	e883 0003 	stmia.w	r3, {r0, r1}
		flagCAN2Rx = 0;
 8000e2c:	4b48      	ldr	r3, [pc, #288]	@ (8000f50 <CAN_Tx+0x144>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
	}
	if(((data_rx[7] == calc_SAE_J1850(data_rx,7,0)) && (FlagForBtn == 0)) || ((FlagForBtn == 1) && (hcan == &hcan1))){
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3307      	adds	r3, #7
 8000e36:	781c      	ldrb	r4, [r3, #0]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2107      	movs	r1, #7
 8000e3c:	68b8      	ldr	r0, [r7, #8]
 8000e3e:	f7ff ff9a 	bl	8000d76 <calc_SAE_J1850>
 8000e42:	4603      	mov	r3, r0
 8000e44:	429c      	cmp	r4, r3
 8000e46:	d103      	bne.n	8000e50 <CAN_Tx+0x44>
 8000e48:	4b44      	ldr	r3, [pc, #272]	@ (8000f5c <CAN_Tx+0x150>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d007      	beq.n	8000e60 <CAN_Tx+0x54>
 8000e50:	4b42      	ldr	r3, [pc, #264]	@ (8000f5c <CAN_Tx+0x150>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d113      	bne.n	8000e80 <CAN_Tx+0x74>
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4a41      	ldr	r2, [pc, #260]	@ (8000f60 <CAN_Tx+0x154>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d10f      	bne.n	8000e80 <CAN_Tx+0x74>
		data_tx[0] = 0x0A;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	220a      	movs	r2, #10
 8000e64:	701a      	strb	r2, [r3, #0]
		data_tx[1] = 0x02;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	701a      	strb	r2, [r3, #0]
		if(data_rx == CAN1_DATA_RX){
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	4a3c      	ldr	r2, [pc, #240]	@ (8000f64 <CAN_Tx+0x158>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10b      	bne.n	8000e8e <CAN_Tx+0x82>
			data_tx[2] = 0x0C;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3302      	adds	r3, #2
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	701a      	strb	r2, [r3, #0]
		if(data_rx == CAN1_DATA_RX){
 8000e7e:	e006      	b.n	8000e8e <CAN_Tx+0x82>
		}
	}
	else{
		data_tx[0] = 0x00;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
		data_tx[1] = 0x00;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
	}
	data_tx[6] = MessageCounter;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3306      	adds	r3, #6
 8000e92:	4a35      	ldr	r2, [pc, #212]	@ (8000f68 <CAN_Tx+0x15c>)
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	701a      	strb	r2, [r3, #0]
	if(FlagForBtn == 0){
 8000e98:	4b30      	ldr	r3, [pc, #192]	@ (8000f5c <CAN_Tx+0x150>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d109      	bne.n	8000eb4 <CAN_Tx+0xa8>
		data_tx[7] = calc_SAE_J1850(data_tx,7,0);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	1ddc      	adds	r4, r3, #7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2107      	movs	r1, #7
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff64 	bl	8000d76 <calc_SAE_J1850>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	7023      	strb	r3, [r4, #0]
 8000eb2:	e00c      	b.n	8000ece <CAN_Tx+0xc2>
	}
	else{
		if(hcan == &hcan2) CAN2_DATA_TX[7] = calc_SAE_J1850(CAN2_DATA_TX,7,0);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f6c <CAN_Tx+0x160>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d108      	bne.n	8000ece <CAN_Tx+0xc2>
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2107      	movs	r1, #7
 8000ec0:	482b      	ldr	r0, [pc, #172]	@ (8000f70 <CAN_Tx+0x164>)
 8000ec2:	f7ff ff58 	bl	8000d76 <calc_SAE_J1850>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <CAN_Tx+0x164>)
 8000ecc:	71da      	strb	r2, [r3, #7]
	}
	char buffer[10];
	sprintf(buffer, "CAN %u TX\n", (hcan == &hcan1) ? 1 : 2);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4a23      	ldr	r2, [pc, #140]	@ (8000f60 <CAN_Tx+0x154>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d101      	bne.n	8000eda <CAN_Tx+0xce>
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	e000      	b.n	8000edc <CAN_Tx+0xd0>
 8000eda:	2202      	movs	r2, #2
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4924      	ldr	r1, [pc, #144]	@ (8000f74 <CAN_Tx+0x168>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fa38 	bl	8004358 <siprintf>
	USART3_SendString((unsigned char *)buffer);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fe6d 	bl	8000bcc <USART3_SendString>
	uint8_t id = (hcan == &hcan1) ? 0x12 : 0xA2;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f60 <CAN_Tx+0x154>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <CAN_Tx+0xf2>
 8000efa:	2312      	movs	r3, #18
 8000efc:	e000      	b.n	8000f00 <CAN_Tx+0xf4>
 8000efe:	23a2      	movs	r3, #162	@ 0xa2
 8000f00:	77fb      	strb	r3, [r7, #31]
	PrintCANLog(id, data_tx);
 8000f02:	7ffb      	ldrb	r3, [r7, #31]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fe79 	bl	8000c00 <PrintCANLog>
	if(hcan == &hcan1){
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4a13      	ldr	r2, [pc, #76]	@ (8000f60 <CAN_Tx+0x154>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d106      	bne.n	8000f24 <CAN_Tx+0x118>
		HAL_CAN_AddTxMessage(hcan, &CAN1_pHeader, data_tx, &CAN1_pTxMailbox);
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <CAN_Tx+0x16c>)
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4918      	ldr	r1, [pc, #96]	@ (8000f7c <CAN_Tx+0x170>)
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f000 fdb9 	bl	8001a94 <HAL_CAN_AddTxMessage>
 8000f22:	e009      	b.n	8000f38 <CAN_Tx+0x12c>
	}
	else if(hcan == &hcan2){
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4a11      	ldr	r2, [pc, #68]	@ (8000f6c <CAN_Tx+0x160>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d105      	bne.n	8000f38 <CAN_Tx+0x12c>
		HAL_CAN_AddTxMessage(hcan, &CAN2_pHeader, data_tx, &CAN2_pTxMailbox);
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <CAN_Tx+0x174>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4914      	ldr	r1, [pc, #80]	@ (8000f84 <CAN_Tx+0x178>)
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f000 fdae 	bl	8001a94 <HAL_CAN_AddTxMessage>
	}
	MessageCounter = MessageCounter & 0xF;
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <CAN_Tx+0x15c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <CAN_Tx+0x15c>)
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	3724      	adds	r7, #36	@ 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd90      	pop	{r4, r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000121e 	.word	0x2000121e
 8000f54:	20001210 	.word	0x20001210
 8000f58:	200011f8 	.word	0x200011f8
 8000f5c:	2000121d 	.word	0x2000121d
 8000f60:	20000098 	.word	0x20000098
 8000f64:	20001200 	.word	0x20001200
 8000f68:	2000121c 	.word	0x2000121c
 8000f6c:	200000c0 	.word	0x200000c0
 8000f70:	20001208 	.word	0x20001208
 8000f74:	08004cd4 	.word	0x08004cd4
 8000f78:	200001e8 	.word	0x200001e8
 8000f7c:	20000130 	.word	0x20000130
 8000f80:	200001ec 	.word	0x200001ec
 8000f84:	2000018c 	.word	0x2000018c

08000f88 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b090      	sub	sp, #64	@ 0x40
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1){
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a28      	ldr	r2, [pc, #160]	@ (8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d115      	bne.n	8000fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1_pHeaderRx, CAN1_DATA_RX);
 8000f98:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000f9a:	4a28      	ldr	r2, [pc, #160]	@ (800103c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4825      	ldr	r0, [pc, #148]	@ (8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000fa0:	f000 fe48 	bl	8001c34 <HAL_CAN_GetRxMessage>
		char buffer1[10] = "CAN 1 RX\n";
 8000fa4:	4a26      	ldr	r2, [pc, #152]	@ (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000fa6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000faa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fac:	c303      	stmia	r3!, {r0, r1}
 8000fae:	801a      	strh	r2, [r3, #0]
		USART3_SendString((unsigned char *)buffer1);
 8000fb0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe09 	bl	8000bcc <USART3_SendString>
		PrintCANLog(0xA2, CAN1_DATA_RX);
 8000fba:	491f      	ldr	r1, [pc, #124]	@ (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000fbc:	20a2      	movs	r0, #162	@ 0xa2
 8000fbe:	f7ff fe1f 	bl	8000c00 <PrintCANLog>
		else{
			char buffer3[26] = "CAN 2 RX ERROR WRONG CRC\n";
			USART3_SendString((unsigned char *)buffer3);
		}
	}
}
 8000fc2:	e032      	b.n	800102a <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
	else if(hcan == &hcan2){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d12e      	bne.n	800102a <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
		HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000fce:	4a1f      	ldr	r2, [pc, #124]	@ (800104c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	481c      	ldr	r0, [pc, #112]	@ (8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000fd4:	f000 fe2e 	bl	8001c34 <HAL_CAN_GetRxMessage>
		if(CAN2_DATA_RX[7] == calc_SAE_J1850(CAN2_DATA_RX,7,0)){
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000fda:	79dc      	ldrb	r4, [r3, #7]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2107      	movs	r1, #7
 8000fe0:	4819      	ldr	r0, [pc, #100]	@ (8001048 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000fe2:	f7ff fec8 	bl	8000d76 <calc_SAE_J1850>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	429c      	cmp	r4, r3
 8000fea:	d10f      	bne.n	800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			char buffer2[10] = "CAN 2 RX\n";
 8000fec:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ff2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff4:	c303      	stmia	r3!, {r0, r1}
 8000ff6:	801a      	strh	r2, [r3, #0]
			USART3_SendString((unsigned char *)buffer2);
 8000ff8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fde5 	bl	8000bcc <USART3_SendString>
			PrintCANLog(0x12, CAN2_DATA_RX);
 8001002:	4911      	ldr	r1, [pc, #68]	@ (8001048 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001004:	2012      	movs	r0, #18
 8001006:	f7ff fdfb 	bl	8000c00 <PrintCANLog>
}
 800100a:	e00e      	b.n	800102a <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			char buffer3[26] = "CAN 2 RX ERROR WRONG CRC\n";
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800100e:	f107 040c 	add.w	r4, r7, #12
 8001012:	461d      	mov	r5, r3
 8001014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001018:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101c:	c403      	stmia	r4!, {r0, r1}
 800101e:	8022      	strh	r2, [r4, #0]
			USART3_SendString((unsigned char *)buffer3);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fdd1 	bl	8000bcc <USART3_SendString>
}
 800102a:	bf00      	nop
 800102c:	3740      	adds	r7, #64	@ 0x40
 800102e:	46bd      	mov	sp, r7
 8001030:	bdb0      	pop	{r4, r5, r7, pc}
 8001032:	bf00      	nop
 8001034:	20000098 	.word	0x20000098
 8001038:	20001200 	.word	0x20001200
 800103c:	20000148 	.word	0x20000148
 8001040:	08004ce0 	.word	0x08004ce0
 8001044:	200000c0 	.word	0x200000c0
 8001048:	20001210 	.word	0x20001210
 800104c:	200001a4 	.word	0x200001a4
 8001050:	08004cec 	.word	0x08004cec
 8001054:	08004cf8 	.word	0x08004cf8

08001058 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d139      	bne.n	80010dc <HAL_GPIO_EXTI_Callback+0x84>
	{
		delay(20);
 8001068:	2014      	movs	r0, #20
 800106a:	f7ff fe77 	bl	8000d5c <delay>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == GPIO_PIN_RESET)
 800106e:	2102      	movs	r1, #2
 8001070:	481c      	ldr	r0, [pc, #112]	@ (80010e4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001072:	f001 fc97 	bl	80029a4 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d12f      	bne.n	80010dc <HAL_GPIO_EXTI_Callback+0x84>
		{
			switch(FlagForBtn)
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x90>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <HAL_GPIO_EXTI_Callback+0x32>
 8001084:	2b01      	cmp	r3, #1
 8001086:	d013      	beq.n	80010b0 <HAL_GPIO_EXTI_Callback+0x58>
					USART3_SendString((uint8_t *)"-> IG ON\n");
					CAN1_DATA_TX[7] = calc_SAE_J1850(CAN1_DATA_TX,7,0);
					flagCAN2Rx = flagCAN2Rx +1;
					break;
				default:
					break;
 8001088:	e028      	b.n	80010dc <HAL_GPIO_EXTI_Callback+0x84>
					FlagForBtn = FlagForBtn + 1;
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x90>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x90>)
 8001094:	701a      	strb	r2, [r3, #0]
					USART3_SendString((uint8_t *)"IG OFF\n");
 8001096:	4815      	ldr	r0, [pc, #84]	@ (80010ec <HAL_GPIO_EXTI_Callback+0x94>)
 8001098:	f7ff fd98 	bl	8000bcc <USART3_SendString>
					CAN1_DATA_TX[7] = calc_SAE_J1850(CAN1_DATA_TX,7,1);
 800109c:	2201      	movs	r2, #1
 800109e:	2107      	movs	r1, #7
 80010a0:	4813      	ldr	r0, [pc, #76]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x98>)
 80010a2:	f7ff fe68 	bl	8000d76 <calc_SAE_J1850>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x98>)
 80010ac:	71da      	strb	r2, [r3, #7]
					break;
 80010ae:	e015      	b.n	80010dc <HAL_GPIO_EXTI_Callback+0x84>
					FlagForBtn = 0;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x90>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
					USART3_SendString((uint8_t *)"-> IG ON\n");
 80010b6:	480f      	ldr	r0, [pc, #60]	@ (80010f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80010b8:	f7ff fd88 	bl	8000bcc <USART3_SendString>
					CAN1_DATA_TX[7] = calc_SAE_J1850(CAN1_DATA_TX,7,0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2107      	movs	r1, #7
 80010c0:	480b      	ldr	r0, [pc, #44]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x98>)
 80010c2:	f7ff fe58 	bl	8000d76 <calc_SAE_J1850>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x98>)
 80010cc:	71da      	strb	r2, [r3, #7]
					flagCAN2Rx = flagCAN2Rx +1;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_GPIO_EXTI_Callback+0xa0>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_GPIO_EXTI_Callback+0xa0>)
 80010d8:	701a      	strb	r2, [r3, #0]
					break;
 80010da:	bf00      	nop
			}
		}
	}
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021000 	.word	0x40021000
 80010e8:	2000121d 	.word	0x2000121d
 80010ec:	08004d14 	.word	0x08004d14
 80010f0:	200011f8 	.word	0x200011f8
 80010f4:	08004d1c 	.word	0x08004d1c
 80010f8:	2000121e 	.word	0x2000121e

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <HAL_MspInit+0x4c>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111c:	6453      	str	r3, [r2, #68]	@ 0x44
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_MspInit+0x4c>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	@ 0x40
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001146:	2005      	movs	r0, #5
 8001148:	f001 f9bc 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800

08001158 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	@ 0x30
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a4a      	ldr	r2, [pc, #296]	@ (80012a0 <HAL_CAN_MspInit+0x148>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d13d      	bne.n	80011f6 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800117a:	4b4a      	ldr	r3, [pc, #296]	@ (80012a4 <HAL_CAN_MspInit+0x14c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a48      	ldr	r2, [pc, #288]	@ (80012a4 <HAL_CAN_MspInit+0x14c>)
 8001182:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001184:	4b47      	ldr	r3, [pc, #284]	@ (80012a4 <HAL_CAN_MspInit+0x14c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d10d      	bne.n	80011a8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	4b45      	ldr	r3, [pc, #276]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	4a44      	ldr	r2, [pc, #272]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 8001196:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800119a:	6413      	str	r3, [r2, #64]	@ 0x40
 800119c:	4b42      	ldr	r3, [pc, #264]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	4b3e      	ldr	r3, [pc, #248]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b0:	4a3d      	ldr	r2, [pc, #244]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b8:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011c4:	2303      	movs	r3, #3
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011d4:	2309      	movs	r3, #9
 80011d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4833      	ldr	r0, [pc, #204]	@ (80012ac <HAL_CAN_MspInit+0x154>)
 80011e0:	f001 fa44 	bl	800266c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2102      	movs	r1, #2
 80011e8:	2014      	movs	r0, #20
 80011ea:	f001 f976 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011ee:	2014      	movs	r0, #20
 80011f0:	f001 f98f 	bl	8002512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80011f4:	e050      	b.n	8001298 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a2d      	ldr	r2, [pc, #180]	@ (80012b0 <HAL_CAN_MspInit+0x158>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d14b      	bne.n	8001298 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	4a27      	ldr	r2, [pc, #156]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 800120a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800120e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001210:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800121c:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <HAL_CAN_MspInit+0x14c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	4a20      	ldr	r2, [pc, #128]	@ (80012a4 <HAL_CAN_MspInit+0x14c>)
 8001224:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001226:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <HAL_CAN_MspInit+0x14c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10d      	bne.n	800124a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	4a1c      	ldr	r2, [pc, #112]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 8001238:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800123c:	6413      	str	r3, [r2, #64]	@ 0x40
 800123e:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a15      	ldr	r2, [pc, #84]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_CAN_MspInit+0x150>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001266:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001278:	2309      	movs	r3, #9
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <HAL_CAN_MspInit+0x15c>)
 8001284:	f001 f9f2 	bl	800266c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2102      	movs	r1, #2
 800128c:	2040      	movs	r0, #64	@ 0x40
 800128e:	f001 f924 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001292:	2040      	movs	r0, #64	@ 0x40
 8001294:	f001 f93d 	bl	8002512 <HAL_NVIC_EnableIRQ>
}
 8001298:	bf00      	nop
 800129a:	3730      	adds	r7, #48	@ 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40006400 	.word	0x40006400
 80012a4:	20001220 	.word	0x20001220
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40006800 	.word	0x40006800
 80012b4:	40020400 	.word	0x40020400

080012b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a2d      	ldr	r2, [pc, #180]	@ (800138c <HAL_UART_MspInit+0xd4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d153      	bne.n	8001382 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <HAL_UART_MspInit+0xd8>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001390 <HAL_UART_MspInit+0xd8>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <HAL_UART_MspInit+0xd8>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <HAL_UART_MspInit+0xd8>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a24      	ldr	r2, [pc, #144]	@ (8001390 <HAL_UART_MspInit+0xd8>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <HAL_UART_MspInit+0xd8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <HAL_UART_MspInit+0xd8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a1d      	ldr	r2, [pc, #116]	@ (8001390 <HAL_UART_MspInit+0xd8>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_UART_MspInit+0xd8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800132e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001340:	2307      	movs	r3, #7
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4812      	ldr	r0, [pc, #72]	@ (8001394 <HAL_UART_MspInit+0xdc>)
 800134c:	f001 f98e 	bl	800266c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001350:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001362:	2307      	movs	r3, #7
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	480a      	ldr	r0, [pc, #40]	@ (8001398 <HAL_UART_MspInit+0xe0>)
 800136e:	f001 f97d 	bl	800266c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2101      	movs	r1, #1
 8001376:	2027      	movs	r0, #39	@ 0x27
 8001378:	f001 f8af 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800137c:	2027      	movs	r0, #39	@ 0x27
 800137e:	f001 f8c8 	bl	8002512 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	@ 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40004800 	.word	0x40004800
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400
 8001398:	40020c00 	.word	0x40020c00

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <NMI_Handler+0x4>

080013a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <MemManage_Handler+0x4>

080013b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f2:	f000 f8eb 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}

080013fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MEMS_INT2_Pin);
 80013fe:	2002      	movs	r0, #2
 8001400:	f001 fb02 	bl	8002a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <CAN1_RX0_IRQHandler+0x10>)
 800140e:	f000 fd59 	bl	8001ec4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000098 	.word	0x20000098

0800141c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <USART3_IRQHandler+0x10>)
 8001422:	f002 f87d 	bl	8003520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200000e8 	.word	0x200000e8

08001430 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001434:	4802      	ldr	r0, [pc, #8]	@ (8001440 <CAN2_RX0_IRQHandler+0x10>)
 8001436:	f000 fd45 	bl	8001ec4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000c0 	.word	0x200000c0

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f002 ff98 	bl	80043a8 <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20020000 	.word	0x20020000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	20001224 	.word	0x20001224
 80014ac:	20001378 	.word	0x20001378

080014b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	@ (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800150c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014d8:	f7ff ffea 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	@ (8001514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f002 ff57 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff f82b 	bl	8000560 <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800150c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001518:	08004d84 	.word	0x08004d84
  ldr r2, =_sbss
 800151c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001520:	20001374 	.word	0x20001374

08001524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <HAL_Init+0x40>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_Init+0x40>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	@ (8001568 <HAL_Init+0x40>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 ffb7 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff fdd4 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 ffcf 	bl	800252e <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 ff97 	bl	80024da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000020 	.word	0x20000020
 80015c4:	20000028 	.word	0x20000028
 80015c8:	20000024 	.word	0x20000024

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	@ (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000028 	.word	0x20000028
 80015f0:	20001228 	.word	0x20001228

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20001228 	.word	0x20001228

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff ffee 	bl	80015f4 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffde 	bl	80015f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000028 	.word	0x20000028

08001654 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0ed      	b.n	8001842 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fd70 	bl	8001158 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001688:	f7ff ffb4 	bl	80015f4 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800168e:	e012      	b.n	80016b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001690:	f7ff ffb0 	bl	80015f4 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b0a      	cmp	r3, #10
 800169c:	d90b      	bls.n	80016b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2205      	movs	r2, #5
 80016ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0c5      	b.n	8001842 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0e5      	beq.n	8001690 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0202 	bic.w	r2, r2, #2
 80016d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d4:	f7ff ff8e 	bl	80015f4 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016da:	e012      	b.n	8001702 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016dc:	f7ff ff8a 	bl	80015f4 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b0a      	cmp	r3, #10
 80016e8:	d90b      	bls.n	8001702 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2205      	movs	r2, #5
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e09f      	b.n	8001842 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1e5      	bne.n	80016dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7e1b      	ldrb	r3, [r3, #24]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d108      	bne.n	800172a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e007      	b.n	800173a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7e5b      	ldrb	r3, [r3, #25]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d108      	bne.n	8001754 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e007      	b.n	8001764 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001762:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7e9b      	ldrb	r3, [r3, #26]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d108      	bne.n	800177e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0220 	orr.w	r2, r2, #32
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e007      	b.n	800178e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0220 	bic.w	r2, r2, #32
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7edb      	ldrb	r3, [r3, #27]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0210 	bic.w	r2, r2, #16
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e007      	b.n	80017b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0210 	orr.w	r2, r2, #16
 80017b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7f1b      	ldrb	r3, [r3, #28]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d108      	bne.n	80017d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0208 	orr.w	r2, r2, #8
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e007      	b.n	80017e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0208 	bic.w	r2, r2, #8
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7f5b      	ldrb	r3, [r3, #29]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d108      	bne.n	80017fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0204 	orr.w	r2, r2, #4
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	e007      	b.n	800180c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0204 	bic.w	r2, r2, #4
 800180a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	ea42 0103 	orr.w	r1, r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001862:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001864:	7cfb      	ldrb	r3, [r7, #19]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d003      	beq.n	8001872 <HAL_CAN_ConfigFilter+0x26>
 800186a:	7cfb      	ldrb	r3, [r7, #19]
 800186c:	2b02      	cmp	r3, #2
 800186e:	f040 80be 	bne.w	80019ee <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001872:	4b65      	ldr	r3, [pc, #404]	@ (8001a08 <HAL_CAN_ConfigFilter+0x1bc>)
 8001874:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800188c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	431a      	orrs	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	2201      	movs	r2, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	401a      	ands	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d123      	bne.n	800191c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3248      	adds	r2, #72	@ 0x48
 80018fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001910:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001912:	6979      	ldr	r1, [r7, #20]
 8001914:	3348      	adds	r3, #72	@ 0x48
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d122      	bne.n	800196a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	431a      	orrs	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001944:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3248      	adds	r2, #72	@ 0x48
 800194a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800195e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001960:	6979      	ldr	r1, [r7, #20]
 8001962:	3348      	adds	r3, #72	@ 0x48
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	401a      	ands	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001984:	e007      	b.n	8001996 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	431a      	orrs	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	401a      	ands	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019b0:	e007      	b.n	80019c2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d107      	bne.n	80019da <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019e0:	f023 0201 	bic.w	r2, r3, #1
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e006      	b.n	80019fc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
  }
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40006400 	.word	0x40006400

08001a0c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d12e      	bne.n	8001a7e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0201 	bic.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a38:	f7ff fddc 	bl	80015f4 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a3e:	e012      	b.n	8001a66 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a40:	f7ff fdd8 	bl	80015f4 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b0a      	cmp	r3, #10
 8001a4c:	d90b      	bls.n	8001a66 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e012      	b.n	8001a8c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e5      	bne.n	8001a40 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e006      	b.n	8001a8c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
  }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ab2:	7ffb      	ldrb	r3, [r7, #31]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d003      	beq.n	8001ac0 <HAL_CAN_AddTxMessage+0x2c>
 8001ab8:	7ffb      	ldrb	r3, [r7, #31]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	f040 80ad 	bne.w	8001c1a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8095 	beq.w	8001c0a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	0e1b      	lsrs	r3, r3, #24
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001aea:	2201      	movs	r2, #1
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10d      	bne.n	8001b18 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b06:	68f9      	ldr	r1, [r7, #12]
 8001b08:	6809      	ldr	r1, [r1, #0]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3318      	adds	r3, #24
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	440b      	add	r3, r1
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e00f      	b.n	8001b38 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b22:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b2c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3318      	adds	r3, #24
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	440b      	add	r3, r1
 8001b36:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6819      	ldr	r1, [r3, #0]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3318      	adds	r3, #24
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	440b      	add	r3, r1
 8001b48:	3304      	adds	r3, #4
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	7d1b      	ldrb	r3, [r3, #20]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d111      	bne.n	8001b78 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3318      	adds	r3, #24
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	4413      	add	r3, r2
 8001b60:	3304      	adds	r3, #4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	6811      	ldr	r1, [r2, #0]
 8001b68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3318      	adds	r3, #24
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	440b      	add	r3, r1
 8001b74:	3304      	adds	r3, #4
 8001b76:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3307      	adds	r3, #7
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	061a      	lsls	r2, r3, #24
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3306      	adds	r3, #6
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	041b      	lsls	r3, r3, #16
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3305      	adds	r3, #5
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	4313      	orrs	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	3204      	adds	r2, #4
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	6811      	ldr	r1, [r2, #0]
 8001ba0:	ea43 0200 	orr.w	r2, r3, r0
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	440b      	add	r3, r1
 8001baa:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001bae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	061a      	lsls	r2, r3, #24
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3302      	adds	r3, #2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	041b      	lsls	r3, r3, #16
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	7812      	ldrb	r2, [r2, #0]
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	6811      	ldr	r1, [r2, #0]
 8001bd6:	ea43 0200 	orr.w	r2, r3, r0
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	440b      	add	r3, r1
 8001be0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001be4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3318      	adds	r3, #24
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	6811      	ldr	r1, [r2, #0]
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3318      	adds	r3, #24
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	440b      	add	r3, r1
 8001c04:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e00e      	b.n	8001c28 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e006      	b.n	8001c28 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
  }
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3724      	adds	r7, #36	@ 0x24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c48:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d003      	beq.n	8001c58 <HAL_CAN_GetRxMessage+0x24>
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	f040 8103 	bne.w	8001e5e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10e      	bne.n	8001c7c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d116      	bne.n	8001c9a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0f7      	b.n	8001e6c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d107      	bne.n	8001c9a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e0e8      	b.n	8001e6c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	331b      	adds	r3, #27
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0204 	and.w	r2, r3, #4
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	331b      	adds	r3, #27
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	4413      	add	r3, r2
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0d5b      	lsrs	r3, r3, #21
 8001cc8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e00b      	b.n	8001cea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	331b      	adds	r3, #27
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	08db      	lsrs	r3, r3, #3
 8001ce2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	331b      	adds	r3, #27
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0202 	and.w	r2, r3, #2
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	331b      	adds	r3, #27
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2208      	movs	r2, #8
 8001d1c:	611a      	str	r2, [r3, #16]
 8001d1e:	e00b      	b.n	8001d38 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	331b      	adds	r3, #27
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 020f 	and.w	r2, r3, #15
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	331b      	adds	r3, #27
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	4413      	add	r3, r2
 8001d44:	3304      	adds	r3, #4
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	331b      	adds	r3, #27
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0a1a      	lsrs	r2, r3, #8
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	3301      	adds	r3, #1
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0c1a      	lsrs	r2, r3, #16
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	3302      	adds	r3, #2
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0e1a      	lsrs	r2, r3, #24
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	3303      	adds	r3, #3
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	3304      	adds	r3, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0a1a      	lsrs	r2, r3, #8
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	3305      	adds	r3, #5
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0c1a      	lsrs	r2, r3, #16
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	3306      	adds	r3, #6
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0e1a      	lsrs	r2, r3, #24
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	3307      	adds	r3, #7
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d108      	bne.n	8001e4a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	e007      	b.n	8001e5a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0220 	orr.w	r2, r2, #32
 8001e58:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e006      	b.n	8001e6c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
  }
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e88:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d002      	beq.n	8001e96 <HAL_CAN_ActivateNotification+0x1e>
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d109      	bne.n	8001eaa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6959      	ldr	r1, [r3, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e006      	b.n	8001eb8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	@ 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d07c      	beq.n	8002004 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d023      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f983 	bl	8002232 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f2c:	e016      	b.n	8001f5c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f40:	e00c      	b.n	8001f5c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f54:	e002      	b.n	8001f5c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f989 	bl	800226e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d024      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f963 	bl	8002246 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f80:	e016      	b.n	8001fb0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d004      	beq.n	8001f96 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f94:	e00c      	b.n	8001fb0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa8:	e002      	b.n	8001fb0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f969 	bl	8002282 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d024      	beq.n	8002004 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fc2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f943 	bl	800225a <HAL_CAN_TxMailbox2CompleteCallback>
 8001fd4:	e016      	b.n	8002004 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe8:	e00c      	b.n	8002004 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffc:	e002      	b.n	8002004 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f949 	bl	8002296 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00c      	beq.n	8002028 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2210      	movs	r2, #16
 8002026:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2208      	movs	r2, #8
 8002042:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f930 	bl	80022aa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe ff90 	bl	8000f88 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00c      	beq.n	800208c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2210      	movs	r2, #16
 800208a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2208      	movs	r2, #8
 80020a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f912 	bl	80022d2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d009      	beq.n	80020cc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8f9 	bl	80022be <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2210      	movs	r2, #16
 80020e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f8fc 	bl	80022e6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00b      	beq.n	8002110 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2208      	movs	r2, #8
 8002108:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f8f5 	bl	80022fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d07b      	beq.n	8002212 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d072      	beq.n	800220a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d008      	beq.n	8002178 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800217e:	2b00      	cmp	r3, #0
 8002180:	d043      	beq.n	800220a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002188:	2b00      	cmp	r3, #0
 800218a:	d03e      	beq.n	800220a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002192:	2b60      	cmp	r3, #96	@ 0x60
 8002194:	d02b      	beq.n	80021ee <HAL_CAN_IRQHandler+0x32a>
 8002196:	2b60      	cmp	r3, #96	@ 0x60
 8002198:	d82e      	bhi.n	80021f8 <HAL_CAN_IRQHandler+0x334>
 800219a:	2b50      	cmp	r3, #80	@ 0x50
 800219c:	d022      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x320>
 800219e:	2b50      	cmp	r3, #80	@ 0x50
 80021a0:	d82a      	bhi.n	80021f8 <HAL_CAN_IRQHandler+0x334>
 80021a2:	2b40      	cmp	r3, #64	@ 0x40
 80021a4:	d019      	beq.n	80021da <HAL_CAN_IRQHandler+0x316>
 80021a6:	2b40      	cmp	r3, #64	@ 0x40
 80021a8:	d826      	bhi.n	80021f8 <HAL_CAN_IRQHandler+0x334>
 80021aa:	2b30      	cmp	r3, #48	@ 0x30
 80021ac:	d010      	beq.n	80021d0 <HAL_CAN_IRQHandler+0x30c>
 80021ae:	2b30      	cmp	r3, #48	@ 0x30
 80021b0:	d822      	bhi.n	80021f8 <HAL_CAN_IRQHandler+0x334>
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d002      	beq.n	80021bc <HAL_CAN_IRQHandler+0x2f8>
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	d005      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021ba:	e01d      	b.n	80021f8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	f043 0308 	orr.w	r3, r3, #8
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021c4:	e019      	b.n	80021fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021ce:	e014      	b.n	80021fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d2:	f043 0320 	orr.w	r3, r3, #32
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021d8:	e00f      	b.n	80021fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021e2:	e00a      	b.n	80021fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021ec:	e005      	b.n	80021fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021f6:	e000      	b.n	80021fa <HAL_CAN_IRQHandler+0x336>
            break;
 80021f8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002208:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2204      	movs	r2, #4
 8002210:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f872 	bl	800230e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800222a:	bf00      	nop
 800222c:	3728      	adds	r7, #40	@ 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800234c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	@ (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	@ (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	db0b      	blt.n	80023b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	4907      	ldr	r1, [pc, #28]	@ (80023c0 <__NVIC_EnableIRQ+0x38>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	2001      	movs	r0, #1
 80023aa:	fa00 f202 	lsl.w	r2, r0, r2
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000e100 	.word	0xe000e100

080023c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	db0a      	blt.n	80023ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	490c      	ldr	r1, [pc, #48]	@ (8002410 <__NVIC_SetPriority+0x4c>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	440b      	add	r3, r1
 80023e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ec:	e00a      	b.n	8002404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4908      	ldr	r1, [pc, #32]	@ (8002414 <__NVIC_SetPriority+0x50>)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	3b04      	subs	r3, #4
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	440b      	add	r3, r1
 8002402:	761a      	strb	r2, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000e100 	.word	0xe000e100
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	@ 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f1c3 0307 	rsb	r3, r3, #7
 8002432:	2b04      	cmp	r3, #4
 8002434:	bf28      	it	cs
 8002436:	2304      	movcs	r3, #4
 8002438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3304      	adds	r3, #4
 800243e:	2b06      	cmp	r3, #6
 8002440:	d902      	bls.n	8002448 <NVIC_EncodePriority+0x30>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3b03      	subs	r3, #3
 8002446:	e000      	b.n	800244a <NVIC_EncodePriority+0x32>
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	401a      	ands	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002460:	f04f 31ff 	mov.w	r1, #4294967295
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43d9      	mvns	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	4313      	orrs	r3, r2
         );
}
 8002472:	4618      	mov	r0, r3
 8002474:	3724      	adds	r7, #36	@ 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002490:	d301      	bcc.n	8002496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002492:	2301      	movs	r3, #1
 8002494:	e00f      	b.n	80024b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002496:	4a0a      	ldr	r2, [pc, #40]	@ (80024c0 <SysTick_Config+0x40>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249e:	210f      	movs	r1, #15
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f7ff ff8e 	bl	80023c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <SysTick_Config+0x40>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	4b04      	ldr	r3, [pc, #16]	@ (80024c0 <SysTick_Config+0x40>)
 80024b0:	2207      	movs	r2, #7
 80024b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	e000e010 	.word	0xe000e010

080024c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff29 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ec:	f7ff ff3e 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	6978      	ldr	r0, [r7, #20]
 80024f8:	f7ff ff8e 	bl	8002418 <NVIC_EncodePriority>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff5d 	bl	80023c4 <__NVIC_SetPriority>
}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff31 	bl	8002388 <__NVIC_EnableIRQ>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ffa2 	bl	8002480 <SysTick_Config>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002552:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff f84e 	bl	80015f4 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d008      	beq.n	8002578 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2280      	movs	r2, #128	@ 0x80
 800256a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e052      	b.n	800261e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0216 	bic.w	r2, r2, #22
 8002586:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002596:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	2b00      	cmp	r3, #0
 800259e:	d103      	bne.n	80025a8 <HAL_DMA_Abort+0x62>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0208 	bic.w	r2, r2, #8
 80025b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c8:	e013      	b.n	80025f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ca:	f7ff f813 	bl	80015f4 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d90c      	bls.n	80025f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2203      	movs	r2, #3
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e015      	b.n	800261e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e4      	bne.n	80025ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002604:	223f      	movs	r2, #63	@ 0x3f
 8002606:	409a      	lsls	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d004      	beq.n	8002644 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2280      	movs	r2, #128	@ 0x80
 800263e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e00c      	b.n	800265e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2205      	movs	r2, #5
 8002648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	@ 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e16b      	b.n	8002960 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	f040 815a 	bne.w	800295a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d005      	beq.n	80026be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d130      	bne.n	8002720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f4:	2201      	movs	r2, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 0201 	and.w	r2, r3, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b03      	cmp	r3, #3
 800272a:	d017      	beq.n	800275c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d123      	bne.n	80027b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	69b9      	ldr	r1, [r7, #24]
 80027ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0203 	and.w	r2, r3, #3
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80b4 	beq.w	800295a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b60      	ldr	r3, [pc, #384]	@ (8002978 <HAL_GPIO_Init+0x30c>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	4a5f      	ldr	r2, [pc, #380]	@ (8002978 <HAL_GPIO_Init+0x30c>)
 80027fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002800:	6453      	str	r3, [r2, #68]	@ 0x44
 8002802:	4b5d      	ldr	r3, [pc, #372]	@ (8002978 <HAL_GPIO_Init+0x30c>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800280e:	4a5b      	ldr	r2, [pc, #364]	@ (800297c <HAL_GPIO_Init+0x310>)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3302      	adds	r3, #2
 8002816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	220f      	movs	r2, #15
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a52      	ldr	r2, [pc, #328]	@ (8002980 <HAL_GPIO_Init+0x314>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d02b      	beq.n	8002892 <HAL_GPIO_Init+0x226>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a51      	ldr	r2, [pc, #324]	@ (8002984 <HAL_GPIO_Init+0x318>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d025      	beq.n	800288e <HAL_GPIO_Init+0x222>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a50      	ldr	r2, [pc, #320]	@ (8002988 <HAL_GPIO_Init+0x31c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01f      	beq.n	800288a <HAL_GPIO_Init+0x21e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4f      	ldr	r2, [pc, #316]	@ (800298c <HAL_GPIO_Init+0x320>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d019      	beq.n	8002886 <HAL_GPIO_Init+0x21a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4e      	ldr	r2, [pc, #312]	@ (8002990 <HAL_GPIO_Init+0x324>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_GPIO_Init+0x216>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4d      	ldr	r2, [pc, #308]	@ (8002994 <HAL_GPIO_Init+0x328>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00d      	beq.n	800287e <HAL_GPIO_Init+0x212>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4c      	ldr	r2, [pc, #304]	@ (8002998 <HAL_GPIO_Init+0x32c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x20e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4b      	ldr	r2, [pc, #300]	@ (800299c <HAL_GPIO_Init+0x330>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_GPIO_Init+0x20a>
 8002872:	2307      	movs	r3, #7
 8002874:	e00e      	b.n	8002894 <HAL_GPIO_Init+0x228>
 8002876:	2308      	movs	r3, #8
 8002878:	e00c      	b.n	8002894 <HAL_GPIO_Init+0x228>
 800287a:	2306      	movs	r3, #6
 800287c:	e00a      	b.n	8002894 <HAL_GPIO_Init+0x228>
 800287e:	2305      	movs	r3, #5
 8002880:	e008      	b.n	8002894 <HAL_GPIO_Init+0x228>
 8002882:	2304      	movs	r3, #4
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x228>
 8002886:	2303      	movs	r3, #3
 8002888:	e004      	b.n	8002894 <HAL_GPIO_Init+0x228>
 800288a:	2302      	movs	r3, #2
 800288c:	e002      	b.n	8002894 <HAL_GPIO_Init+0x228>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_GPIO_Init+0x228>
 8002892:	2300      	movs	r3, #0
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f002 0203 	and.w	r2, r2, #3
 800289a:	0092      	lsls	r2, r2, #2
 800289c:	4093      	lsls	r3, r2
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a4:	4935      	ldr	r1, [pc, #212]	@ (800297c <HAL_GPIO_Init+0x310>)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	3302      	adds	r3, #2
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_GPIO_Init+0x334>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028d6:	4a32      	ldr	r2, [pc, #200]	@ (80029a0 <HAL_GPIO_Init+0x334>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028dc:	4b30      	ldr	r3, [pc, #192]	@ (80029a0 <HAL_GPIO_Init+0x334>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002900:	4a27      	ldr	r2, [pc, #156]	@ (80029a0 <HAL_GPIO_Init+0x334>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002906:	4b26      	ldr	r3, [pc, #152]	@ (80029a0 <HAL_GPIO_Init+0x334>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800292a:	4a1d      	ldr	r2, [pc, #116]	@ (80029a0 <HAL_GPIO_Init+0x334>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_GPIO_Init+0x334>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002954:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <HAL_GPIO_Init+0x334>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3301      	adds	r3, #1
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b0f      	cmp	r3, #15
 8002964:	f67f ae90 	bls.w	8002688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3724      	adds	r7, #36	@ 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	40013800 	.word	0x40013800
 8002980:	40020000 	.word	0x40020000
 8002984:	40020400 	.word	0x40020400
 8002988:	40020800 	.word	0x40020800
 800298c:	40020c00 	.word	0x40020c00
 8002990:	40021000 	.word	0x40021000
 8002994:	40021400 	.word	0x40021400
 8002998:	40021800 	.word	0x40021800
 800299c:	40021c00 	.word	0x40021c00
 80029a0:	40013c00 	.word	0x40013c00

080029a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	887b      	ldrh	r3, [r7, #2]
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	e001      	b.n	80029c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e4:	787b      	ldrb	r3, [r7, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029f0:	e003      	b.n	80029fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	041a      	lsls	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	619a      	str	r2, [r3, #24]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a12:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a1e:	4a05      	ldr	r2, [pc, #20]	@ (8002a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fb16 	bl	8001058 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40013c00 	.word	0x40013c00

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e267      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d075      	beq.n	8002b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a56:	4b88      	ldr	r3, [pc, #544]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d00c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b85      	ldr	r3, [pc, #532]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d112      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4b82      	ldr	r3, [pc, #520]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d05b      	beq.n	8002b40 <HAL_RCC_OscConfig+0x108>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d157      	bne.n	8002b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e242      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x74>
 8002a9e:	4b76      	ldr	r3, [pc, #472]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a75      	ldr	r2, [pc, #468]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x98>
 8002ab6:	4b70      	ldr	r3, [pc, #448]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6f      	ldr	r2, [pc, #444]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6c      	ldr	r2, [pc, #432]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002ad0:	4b69      	ldr	r3, [pc, #420]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a68      	ldr	r2, [pc, #416]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b66      	ldr	r3, [pc, #408]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a65      	ldr	r2, [pc, #404]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fd80 	bl	80015f4 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fd7c 	bl	80015f4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e207      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xc0>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe fd6c 	bl	80015f4 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fd68 	bl	80015f4 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1f3      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b51      	ldr	r3, [pc, #324]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0xe8>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b44      	ldr	r3, [pc, #272]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1c7      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4937      	ldr	r1, [pc, #220]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e03a      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b34      	ldr	r3, [pc, #208]	@ (8002c7c <HAL_RCC_OscConfig+0x244>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe fd21 	bl	80015f4 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fe fd1d 	bl	80015f4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1a8      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b28      	ldr	r3, [pc, #160]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4925      	ldr	r1, [pc, #148]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	4b24      	ldr	r3, [pc, #144]	@ (8002c7c <HAL_RCC_OscConfig+0x244>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fd00 	bl	80015f4 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fcfc 	bl	80015f4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e187      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d036      	beq.n	8002c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <HAL_RCC_OscConfig+0x248>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe fce0 	bl	80015f4 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fe fcdc 	bl	80015f4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e167      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x200>
 8002c56:	e01b      	b.n	8002c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c58:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_OscConfig+0x248>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fcc9 	bl	80015f4 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	e00e      	b.n	8002c84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fe fcc5 	bl	80015f4 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d907      	bls.n	8002c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e150      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	42470000 	.word	0x42470000
 8002c80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	4b88      	ldr	r3, [pc, #544]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ea      	bne.n	8002c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8097 	beq.w	8002dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b81      	ldr	r3, [pc, #516]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10f      	bne.n	8002cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b77      	ldr	r3, [pc, #476]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d118      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cda:	4b74      	ldr	r3, [pc, #464]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a73      	ldr	r2, [pc, #460]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fc85 	bl	80015f4 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cee:	f7fe fc81 	bl	80015f4 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e10c      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2ea>
 8002d14:	4b64      	ldr	r3, [pc, #400]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d18:	4a63      	ldr	r2, [pc, #396]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d20:	e01c      	b.n	8002d5c <HAL_RCC_OscConfig+0x324>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x30c>
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d36:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0x324>
 8002d44:	4b58      	ldr	r3, [pc, #352]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d48:	4a57      	ldr	r2, [pc, #348]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d50:	4b55      	ldr	r3, [pc, #340]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d54:	4a54      	ldr	r2, [pc, #336]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d56:	f023 0304 	bic.w	r3, r3, #4
 8002d5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d015      	beq.n	8002d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe fc46 	bl	80015f4 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fc42 	bl	80015f4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0cb      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	4b49      	ldr	r3, [pc, #292]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ee      	beq.n	8002d6c <HAL_RCC_OscConfig+0x334>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7fe fc30 	bl	80015f4 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d98:	f7fe fc2c 	bl	80015f4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e0b5      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1ee      	bne.n	8002d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	4b39      	ldr	r3, [pc, #228]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	4a38      	ldr	r2, [pc, #224]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80a1 	beq.w	8002f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd6:	4b34      	ldr	r3, [pc, #208]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d05c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d141      	bne.n	8002e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe fc00 	bl	80015f4 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fbfc 	bl	80015f4 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e087      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	019b      	lsls	r3, r3, #6
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	491b      	ldr	r1, [pc, #108]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e40:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fe fbd5 	bl	80015f4 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fe fbd1 	bl	80015f4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e05c      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x416>
 8002e6c:	e054      	b.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6e:	4b10      	ldr	r3, [pc, #64]	@ (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe fbbe 	bl	80015f4 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe fbba 	bl	80015f4 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e045      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x444>
 8002e9a:	e03d      	b.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e038      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d028      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d121      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d11a      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d111      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	3b01      	subs	r3, #1
 8002efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800

08002f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0cc      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b68      	ldr	r3, [pc, #416]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d90c      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b65      	ldr	r3, [pc, #404]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b63      	ldr	r3, [pc, #396]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0b8      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d020      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f7c:	4b59      	ldr	r3, [pc, #356]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a58      	ldr	r2, [pc, #352]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f94:	4b53      	ldr	r3, [pc, #332]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a52      	ldr	r2, [pc, #328]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b50      	ldr	r3, [pc, #320]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	494d      	ldr	r1, [pc, #308]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d044      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b47      	ldr	r3, [pc, #284]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d119      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e07f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e067      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b37      	ldr	r3, [pc, #220]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4934      	ldr	r1, [pc, #208]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7fe faec 	bl	80015f4 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fe fae8 	bl	80015f4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e04f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2b      	ldr	r3, [pc, #172]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b25      	ldr	r3, [pc, #148]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d20c      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b22      	ldr	r3, [pc, #136]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e032      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800307c:	4b19      	ldr	r3, [pc, #100]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4916      	ldr	r1, [pc, #88]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309a:	4b12      	ldr	r3, [pc, #72]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	490e      	ldr	r1, [pc, #56]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ae:	f000 f821 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	490a      	ldr	r1, [pc, #40]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	5ccb      	ldrb	r3, [r1, r3]
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	4a09      	ldr	r2, [pc, #36]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030ca:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fa4c 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023c00 	.word	0x40023c00
 80030e4:	40023800 	.word	0x40023800
 80030e8:	08004d28 	.word	0x08004d28
 80030ec:	20000020 	.word	0x20000020
 80030f0:	20000024 	.word	0x20000024

080030f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f8:	b094      	sub	sp, #80	@ 0x50
 80030fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800310c:	4b79      	ldr	r3, [pc, #484]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d00d      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x40>
 8003118:	2b08      	cmp	r3, #8
 800311a:	f200 80e1 	bhi.w	80032e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x34>
 8003122:	2b04      	cmp	r3, #4
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x3a>
 8003126:	e0db      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003128:	4b73      	ldr	r3, [pc, #460]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800312a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800312c:	e0db      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312e:	4b73      	ldr	r3, [pc, #460]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003130:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003132:	e0d8      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003134:	4b6f      	ldr	r3, [pc, #444]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800313c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800313e:	4b6d      	ldr	r3, [pc, #436]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d063      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314a:	4b6a      	ldr	r3, [pc, #424]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	2200      	movs	r2, #0
 8003152:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003154:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315c:	633b      	str	r3, [r7, #48]	@ 0x30
 800315e:	2300      	movs	r3, #0
 8003160:	637b      	str	r3, [r7, #52]	@ 0x34
 8003162:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003166:	4622      	mov	r2, r4
 8003168:	462b      	mov	r3, r5
 800316a:	f04f 0000 	mov.w	r0, #0
 800316e:	f04f 0100 	mov.w	r1, #0
 8003172:	0159      	lsls	r1, r3, #5
 8003174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003178:	0150      	lsls	r0, r2, #5
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4621      	mov	r1, r4
 8003180:	1a51      	subs	r1, r2, r1
 8003182:	6139      	str	r1, [r7, #16]
 8003184:	4629      	mov	r1, r5
 8003186:	eb63 0301 	sbc.w	r3, r3, r1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003198:	4659      	mov	r1, fp
 800319a:	018b      	lsls	r3, r1, #6
 800319c:	4651      	mov	r1, sl
 800319e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031a2:	4651      	mov	r1, sl
 80031a4:	018a      	lsls	r2, r1, #6
 80031a6:	4651      	mov	r1, sl
 80031a8:	ebb2 0801 	subs.w	r8, r2, r1
 80031ac:	4659      	mov	r1, fp
 80031ae:	eb63 0901 	sbc.w	r9, r3, r1
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031c6:	4690      	mov	r8, r2
 80031c8:	4699      	mov	r9, r3
 80031ca:	4623      	mov	r3, r4
 80031cc:	eb18 0303 	adds.w	r3, r8, r3
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	462b      	mov	r3, r5
 80031d4:	eb49 0303 	adc.w	r3, r9, r3
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031e6:	4629      	mov	r1, r5
 80031e8:	024b      	lsls	r3, r1, #9
 80031ea:	4621      	mov	r1, r4
 80031ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031f0:	4621      	mov	r1, r4
 80031f2:	024a      	lsls	r2, r1, #9
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031fa:	2200      	movs	r2, #0
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003204:	f7fd f834 	bl	8000270 <__aeabi_uldivmod>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4613      	mov	r3, r2
 800320e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003210:	e058      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003212:	4b38      	ldr	r3, [pc, #224]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	2200      	movs	r2, #0
 800321a:	4618      	mov	r0, r3
 800321c:	4611      	mov	r1, r2
 800321e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003222:	623b      	str	r3, [r7, #32]
 8003224:	2300      	movs	r3, #0
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
 8003228:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800322c:	4642      	mov	r2, r8
 800322e:	464b      	mov	r3, r9
 8003230:	f04f 0000 	mov.w	r0, #0
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	0159      	lsls	r1, r3, #5
 800323a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323e:	0150      	lsls	r0, r2, #5
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4641      	mov	r1, r8
 8003246:	ebb2 0a01 	subs.w	sl, r2, r1
 800324a:	4649      	mov	r1, r9
 800324c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800325c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003260:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003264:	ebb2 040a 	subs.w	r4, r2, sl
 8003268:	eb63 050b 	sbc.w	r5, r3, fp
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	00eb      	lsls	r3, r5, #3
 8003276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800327a:	00e2      	lsls	r2, r4, #3
 800327c:	4614      	mov	r4, r2
 800327e:	461d      	mov	r5, r3
 8003280:	4643      	mov	r3, r8
 8003282:	18e3      	adds	r3, r4, r3
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	464b      	mov	r3, r9
 8003288:	eb45 0303 	adc.w	r3, r5, r3
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800329a:	4629      	mov	r1, r5
 800329c:	028b      	lsls	r3, r1, #10
 800329e:	4621      	mov	r1, r4
 80032a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a4:	4621      	mov	r1, r4
 80032a6:	028a      	lsls	r2, r1, #10
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ae:	2200      	movs	r2, #0
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	61fa      	str	r2, [r7, #28]
 80032b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b8:	f7fc ffda 	bl	8000270 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4613      	mov	r3, r2
 80032c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	3301      	adds	r3, #1
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032de:	e002      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3750      	adds	r7, #80	@ 0x50
 80032ec:	46bd      	mov	sp, r7
 80032ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	007a1200 	.word	0x007a1200

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b03      	ldr	r3, [pc, #12]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000020 	.word	0x20000020

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800331c:	f7ff fff0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0a9b      	lsrs	r3, r3, #10
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	@ (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	08004d38 	.word	0x08004d38

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003344:	f7ff ffdc 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0b5b      	lsrs	r3, r3, #13
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4903      	ldr	r1, [pc, #12]	@ (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	08004d38 	.word	0x08004d38

08003368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e042      	b.n	8003400 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd ff92 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2224      	movs	r2, #36	@ 0x24
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fd5f 	bl	8003e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	@ 0x28
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	4613      	mov	r3, r2
 8003416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b20      	cmp	r3, #32
 8003426:	d175      	bne.n	8003514 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_UART_Transmit+0x2c>
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e06e      	b.n	8003516 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2221      	movs	r2, #33	@ 0x21
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003446:	f7fe f8d5 	bl	80015f4 <HAL_GetTick>
 800344a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	88fa      	ldrh	r2, [r7, #6]
 8003456:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003460:	d108      	bne.n	8003474 <HAL_UART_Transmit+0x6c>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d104      	bne.n	8003474 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	e003      	b.n	800347c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800347c:	e02e      	b.n	80034dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2200      	movs	r2, #0
 8003486:	2180      	movs	r1, #128	@ 0x80
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fafb 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e03a      	b.n	8003516 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	3302      	adds	r3, #2
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	e007      	b.n	80034ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	3301      	adds	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1cb      	bne.n	800347e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2140      	movs	r1, #64	@ 0x40
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fac7 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e006      	b.n	8003516 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0ba      	sub	sp, #232	@ 0xe8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003546:	2300      	movs	r3, #0
 8003548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800355e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10f      	bne.n	8003586 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <HAL_UART_IRQHandler+0x66>
 8003572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fbb8 	bl	8003cf4 <UART_Receive_IT>
      return;
 8003584:	e25b      	b.n	8003a3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80de 	beq.w	800374c <HAL_UART_IRQHandler+0x22c>
 8003590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800359c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80d1 	beq.w	800374c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_UART_IRQHandler+0xae>
 80035b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	f043 0201 	orr.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_UART_IRQHandler+0xd2>
 80035da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	f043 0202 	orr.w	r2, r3, #2
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_UART_IRQHandler+0xf6>
 80035fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d011      	beq.n	8003646 <HAL_UART_IRQHandler+0x126>
 8003622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800362e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	f043 0208 	orr.w	r2, r3, #8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 81f2 	beq.w	8003a34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_UART_IRQHandler+0x14e>
 800365c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fb43 	bl	8003cf4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003678:	2b40      	cmp	r3, #64	@ 0x40
 800367a:	bf0c      	ite	eq
 800367c:	2301      	moveq	r3, #1
 800367e:	2300      	movne	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <HAL_UART_IRQHandler+0x17a>
 8003692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d04f      	beq.n	800373a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fa4b 	bl	8003b36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036aa:	2b40      	cmp	r3, #64	@ 0x40
 80036ac:	d141      	bne.n	8003732 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3314      	adds	r3, #20
 80036b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3314      	adds	r3, #20
 80036d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1d9      	bne.n	80036ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d013      	beq.n	800372a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003706:	4a7e      	ldr	r2, [pc, #504]	@ (8003900 <HAL_UART_IRQHandler+0x3e0>)
 8003708:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe ff89 	bl	8002626 <HAL_DMA_Abort_IT>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003724:	4610      	mov	r0, r2
 8003726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	e00e      	b.n	8003748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f994 	bl	8003a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003730:	e00a      	b.n	8003748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f990 	bl	8003a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	e006      	b.n	8003748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f98c 	bl	8003a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003746:	e175      	b.n	8003a34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003748:	bf00      	nop
    return;
 800374a:	e173      	b.n	8003a34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003750:	2b01      	cmp	r3, #1
 8003752:	f040 814f 	bne.w	80039f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8148 	beq.w	80039f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8141 	beq.w	80039f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003792:	2b40      	cmp	r3, #64	@ 0x40
 8003794:	f040 80b6 	bne.w	8003904 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8145 	beq.w	8003a38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037b6:	429a      	cmp	r2, r3
 80037b8:	f080 813e 	bcs.w	8003a38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ce:	f000 8088 	beq.w	80038e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003802:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800380a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1d9      	bne.n	80037d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3314      	adds	r3, #20
 8003824:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800382e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3314      	adds	r3, #20
 800383e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003842:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003846:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800384a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003854:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e1      	bne.n	800381e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3314      	adds	r3, #20
 8003860:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800386a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800386c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003870:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3314      	adds	r3, #20
 800387a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800387e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003880:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003884:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800388c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e3      	bne.n	800385a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	330c      	adds	r3, #12
 80038a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038aa:	e853 3f00 	ldrex	r3, [r3]
 80038ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038b2:	f023 0310 	bic.w	r3, r3, #16
 80038b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e3      	bne.n	80038a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fe32 	bl	8002546 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f8b7 	bl	8003a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038fe:	e09b      	b.n	8003a38 <HAL_UART_IRQHandler+0x518>
 8003900:	08003bfd 	.word	0x08003bfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800390c:	b29b      	uxth	r3, r3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 808e 	beq.w	8003a3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8089 	beq.w	8003a3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	330c      	adds	r3, #12
 8003930:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800393a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003940:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800394e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003950:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003954:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800395c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e3      	bne.n	800392a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3314      	adds	r3, #20
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	623b      	str	r3, [r7, #32]
   return(result);
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3314      	adds	r3, #20
 8003982:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003986:	633a      	str	r2, [r7, #48]	@ 0x30
 8003988:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800398c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e3      	bne.n	8003962 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0310 	bic.w	r3, r3, #16
 80039be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	330c      	adds	r3, #12
 80039c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039cc:	61fa      	str	r2, [r7, #28]
 80039ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	69b9      	ldr	r1, [r7, #24]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	617b      	str	r3, [r7, #20]
   return(result);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e3      	bne.n	80039a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039ea:	4619      	mov	r1, r3
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f83d 	bl	8003a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039f2:	e023      	b.n	8003a3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <HAL_UART_IRQHandler+0x4f4>
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f909 	bl	8003c24 <UART_Transmit_IT>
    return;
 8003a12:	e014      	b.n	8003a3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <HAL_UART_IRQHandler+0x51e>
 8003a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f949 	bl	8003cc4 <UART_EndTransmit_IT>
    return;
 8003a32:	e004      	b.n	8003a3e <HAL_UART_IRQHandler+0x51e>
    return;
 8003a34:	bf00      	nop
 8003a36:	e002      	b.n	8003a3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a3c:	bf00      	nop
  }
}
 8003a3e:	37e8      	adds	r7, #232	@ 0xe8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a94:	e03b      	b.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d037      	beq.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fd fda9 	bl	80015f4 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e03a      	b.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d023      	beq.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b80      	cmp	r3, #128	@ 0x80
 8003aca:	d020      	beq.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b40      	cmp	r3, #64	@ 0x40
 8003ad0:	d01d      	beq.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d116      	bne.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f81d 	bl	8003b36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2208      	movs	r2, #8
 8003b00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00f      	b.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4013      	ands	r3, r2
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d0b4      	beq.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b095      	sub	sp, #84	@ 0x54
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	330c      	adds	r3, #12
 8003b44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	330c      	adds	r3, #12
 8003b5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e5      	bne.n	8003b3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3314      	adds	r3, #20
 8003b78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3314      	adds	r3, #20
 8003b90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e5      	bne.n	8003b72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d119      	bne.n	8003be2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f023 0310 	bic.w	r3, r3, #16
 8003bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bce:	61ba      	str	r2, [r7, #24]
 8003bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6979      	ldr	r1, [r7, #20]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	613b      	str	r3, [r7, #16]
   return(result);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e5      	bne.n	8003bae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bf0:	bf00      	nop
 8003bf2:	3754      	adds	r7, #84	@ 0x54
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f7ff ff1e 	bl	8003a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b21      	cmp	r3, #33	@ 0x21
 8003c36:	d13e      	bne.n	8003cb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c40:	d114      	bne.n	8003c6c <UART_Transmit_IT+0x48>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d110      	bne.n	8003c6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	1c9a      	adds	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	621a      	str	r2, [r3, #32]
 8003c6a:	e008      	b.n	8003c7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	1c59      	adds	r1, r3, #1
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6211      	str	r1, [r2, #32]
 8003c76:	781a      	ldrb	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10f      	bne.n	8003cb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ca0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e000      	b.n	8003cb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
  }
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff fead 	bl	8003a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08c      	sub	sp, #48	@ 0x30
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b22      	cmp	r3, #34	@ 0x22
 8003d06:	f040 80ae 	bne.w	8003e66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d12:	d117      	bne.n	8003d44 <UART_Receive_IT+0x50>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d113      	bne.n	8003d44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d42:	e026      	b.n	8003d92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d56:	d007      	beq.n	8003d68 <UART_Receive_IT+0x74>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <UART_Receive_IT+0x82>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e008      	b.n	8003d88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d15d      	bne.n	8003e62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0220 	bic.w	r2, r2, #32
 8003db4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d135      	bne.n	8003e58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
 8003df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	613b      	str	r3, [r7, #16]
   return(result);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f023 0310 	bic.w	r3, r3, #16
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e12:	623a      	str	r2, [r7, #32]
 8003e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	69f9      	ldr	r1, [r7, #28]
 8003e18:	6a3a      	ldr	r2, [r7, #32]
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e5      	bne.n	8003df2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d10a      	bne.n	8003e4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fe0b 	bl	8003a6c <HAL_UARTEx_RxEventCallback>
 8003e56:	e002      	b.n	8003e5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7fc ff61 	bl	8000d20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e002      	b.n	8003e68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3730      	adds	r7, #48	@ 0x30
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e74:	b0c0      	sub	sp, #256	@ 0x100
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8c:	68d9      	ldr	r1, [r3, #12]
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	ea40 0301 	orr.w	r3, r0, r1
 8003e98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ec8:	f021 010c 	bic.w	r1, r1, #12
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eea:	6999      	ldr	r1, [r3, #24]
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	ea40 0301 	orr.w	r3, r0, r1
 8003ef6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b8f      	ldr	r3, [pc, #572]	@ (800413c <UART_SetConfig+0x2cc>)
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d005      	beq.n	8003f10 <UART_SetConfig+0xa0>
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004140 <UART_SetConfig+0x2d0>)
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d104      	bne.n	8003f1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f10:	f7ff fa16 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8003f14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f18:	e003      	b.n	8003f22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f1a:	f7ff f9fd 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8003f1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f2c:	f040 810c 	bne.w	8004148 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f42:	4622      	mov	r2, r4
 8003f44:	462b      	mov	r3, r5
 8003f46:	1891      	adds	r1, r2, r2
 8003f48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f4a:	415b      	adcs	r3, r3
 8003f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f52:	4621      	mov	r1, r4
 8003f54:	eb12 0801 	adds.w	r8, r2, r1
 8003f58:	4629      	mov	r1, r5
 8003f5a:	eb43 0901 	adc.w	r9, r3, r1
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f72:	4690      	mov	r8, r2
 8003f74:	4699      	mov	r9, r3
 8003f76:	4623      	mov	r3, r4
 8003f78:	eb18 0303 	adds.w	r3, r8, r3
 8003f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f80:	462b      	mov	r3, r5
 8003f82:	eb49 0303 	adc.w	r3, r9, r3
 8003f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	18db      	adds	r3, r3, r3
 8003fa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	eb42 0303 	adc.w	r3, r2, r3
 8003faa:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fb4:	f7fc f95c 	bl	8000270 <__aeabi_uldivmod>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4b61      	ldr	r3, [pc, #388]	@ (8004144 <UART_SetConfig+0x2d4>)
 8003fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	011c      	lsls	r4, r3, #4
 8003fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003fd8:	4642      	mov	r2, r8
 8003fda:	464b      	mov	r3, r9
 8003fdc:	1891      	adds	r1, r2, r2
 8003fde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003fe0:	415b      	adcs	r3, r3
 8003fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fe8:	4641      	mov	r1, r8
 8003fea:	eb12 0a01 	adds.w	sl, r2, r1
 8003fee:	4649      	mov	r1, r9
 8003ff0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004000:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004008:	4692      	mov	sl, r2
 800400a:	469b      	mov	fp, r3
 800400c:	4643      	mov	r3, r8
 800400e:	eb1a 0303 	adds.w	r3, sl, r3
 8004012:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004016:	464b      	mov	r3, r9
 8004018:	eb4b 0303 	adc.w	r3, fp, r3
 800401c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800402c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004030:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004034:	460b      	mov	r3, r1
 8004036:	18db      	adds	r3, r3, r3
 8004038:	643b      	str	r3, [r7, #64]	@ 0x40
 800403a:	4613      	mov	r3, r2
 800403c:	eb42 0303 	adc.w	r3, r2, r3
 8004040:	647b      	str	r3, [r7, #68]	@ 0x44
 8004042:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004046:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800404a:	f7fc f911 	bl	8000270 <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4611      	mov	r1, r2
 8004054:	4b3b      	ldr	r3, [pc, #236]	@ (8004144 <UART_SetConfig+0x2d4>)
 8004056:	fba3 2301 	umull	r2, r3, r3, r1
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	2264      	movs	r2, #100	@ 0x64
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	1acb      	subs	r3, r1, r3
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800406a:	4b36      	ldr	r3, [pc, #216]	@ (8004144 <UART_SetConfig+0x2d4>)
 800406c:	fba3 2302 	umull	r2, r3, r3, r2
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004078:	441c      	add	r4, r3
 800407a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800407e:	2200      	movs	r2, #0
 8004080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004084:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004088:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800408c:	4642      	mov	r2, r8
 800408e:	464b      	mov	r3, r9
 8004090:	1891      	adds	r1, r2, r2
 8004092:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004094:	415b      	adcs	r3, r3
 8004096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004098:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800409c:	4641      	mov	r1, r8
 800409e:	1851      	adds	r1, r2, r1
 80040a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80040a2:	4649      	mov	r1, r9
 80040a4:	414b      	adcs	r3, r1
 80040a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040b4:	4659      	mov	r1, fp
 80040b6:	00cb      	lsls	r3, r1, #3
 80040b8:	4651      	mov	r1, sl
 80040ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040be:	4651      	mov	r1, sl
 80040c0:	00ca      	lsls	r2, r1, #3
 80040c2:	4610      	mov	r0, r2
 80040c4:	4619      	mov	r1, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	4642      	mov	r2, r8
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040d0:	464b      	mov	r3, r9
 80040d2:	460a      	mov	r2, r1
 80040d4:	eb42 0303 	adc.w	r3, r2, r3
 80040d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040f0:	460b      	mov	r3, r1
 80040f2:	18db      	adds	r3, r3, r3
 80040f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040f6:	4613      	mov	r3, r2
 80040f8:	eb42 0303 	adc.w	r3, r2, r3
 80040fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004102:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004106:	f7fc f8b3 	bl	8000270 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4b0d      	ldr	r3, [pc, #52]	@ (8004144 <UART_SetConfig+0x2d4>)
 8004110:	fba3 1302 	umull	r1, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	2164      	movs	r1, #100	@ 0x64
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	3332      	adds	r3, #50	@ 0x32
 8004122:	4a08      	ldr	r2, [pc, #32]	@ (8004144 <UART_SetConfig+0x2d4>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f003 0207 	and.w	r2, r3, #7
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4422      	add	r2, r4
 8004136:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004138:	e106      	b.n	8004348 <UART_SetConfig+0x4d8>
 800413a:	bf00      	nop
 800413c:	40011000 	.word	0x40011000
 8004140:	40011400 	.word	0x40011400
 8004144:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800414c:	2200      	movs	r2, #0
 800414e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004152:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004156:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800415a:	4642      	mov	r2, r8
 800415c:	464b      	mov	r3, r9
 800415e:	1891      	adds	r1, r2, r2
 8004160:	6239      	str	r1, [r7, #32]
 8004162:	415b      	adcs	r3, r3
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
 8004166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800416a:	4641      	mov	r1, r8
 800416c:	1854      	adds	r4, r2, r1
 800416e:	4649      	mov	r1, r9
 8004170:	eb43 0501 	adc.w	r5, r3, r1
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	00eb      	lsls	r3, r5, #3
 800417e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004182:	00e2      	lsls	r2, r4, #3
 8004184:	4614      	mov	r4, r2
 8004186:	461d      	mov	r5, r3
 8004188:	4643      	mov	r3, r8
 800418a:	18e3      	adds	r3, r4, r3
 800418c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004190:	464b      	mov	r3, r9
 8004192:	eb45 0303 	adc.w	r3, r5, r3
 8004196:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041b6:	4629      	mov	r1, r5
 80041b8:	008b      	lsls	r3, r1, #2
 80041ba:	4621      	mov	r1, r4
 80041bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c0:	4621      	mov	r1, r4
 80041c2:	008a      	lsls	r2, r1, #2
 80041c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041c8:	f7fc f852 	bl	8000270 <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4b60      	ldr	r3, [pc, #384]	@ (8004354 <UART_SetConfig+0x4e4>)
 80041d2:	fba3 2302 	umull	r2, r3, r3, r2
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	011c      	lsls	r4, r3, #4
 80041da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041ec:	4642      	mov	r2, r8
 80041ee:	464b      	mov	r3, r9
 80041f0:	1891      	adds	r1, r2, r2
 80041f2:	61b9      	str	r1, [r7, #24]
 80041f4:	415b      	adcs	r3, r3
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041fc:	4641      	mov	r1, r8
 80041fe:	1851      	adds	r1, r2, r1
 8004200:	6139      	str	r1, [r7, #16]
 8004202:	4649      	mov	r1, r9
 8004204:	414b      	adcs	r3, r1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004214:	4659      	mov	r1, fp
 8004216:	00cb      	lsls	r3, r1, #3
 8004218:	4651      	mov	r1, sl
 800421a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421e:	4651      	mov	r1, sl
 8004220:	00ca      	lsls	r2, r1, #3
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	4603      	mov	r3, r0
 8004228:	4642      	mov	r2, r8
 800422a:	189b      	adds	r3, r3, r2
 800422c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004230:	464b      	mov	r3, r9
 8004232:	460a      	mov	r2, r1
 8004234:	eb42 0303 	adc.w	r3, r2, r3
 8004238:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004246:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004254:	4649      	mov	r1, r9
 8004256:	008b      	lsls	r3, r1, #2
 8004258:	4641      	mov	r1, r8
 800425a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800425e:	4641      	mov	r1, r8
 8004260:	008a      	lsls	r2, r1, #2
 8004262:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004266:	f7fc f803 	bl	8000270 <__aeabi_uldivmod>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4611      	mov	r1, r2
 8004270:	4b38      	ldr	r3, [pc, #224]	@ (8004354 <UART_SetConfig+0x4e4>)
 8004272:	fba3 2301 	umull	r2, r3, r3, r1
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	2264      	movs	r2, #100	@ 0x64
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	1acb      	subs	r3, r1, r3
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	3332      	adds	r3, #50	@ 0x32
 8004284:	4a33      	ldr	r2, [pc, #204]	@ (8004354 <UART_SetConfig+0x4e4>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004290:	441c      	add	r4, r3
 8004292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004296:	2200      	movs	r2, #0
 8004298:	673b      	str	r3, [r7, #112]	@ 0x70
 800429a:	677a      	str	r2, [r7, #116]	@ 0x74
 800429c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	1891      	adds	r1, r2, r2
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	415b      	adcs	r3, r3
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b0:	4641      	mov	r1, r8
 80042b2:	1851      	adds	r1, r2, r1
 80042b4:	6039      	str	r1, [r7, #0]
 80042b6:	4649      	mov	r1, r9
 80042b8:	414b      	adcs	r3, r1
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042c8:	4659      	mov	r1, fp
 80042ca:	00cb      	lsls	r3, r1, #3
 80042cc:	4651      	mov	r1, sl
 80042ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d2:	4651      	mov	r1, sl
 80042d4:	00ca      	lsls	r2, r1, #3
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	4603      	mov	r3, r0
 80042dc:	4642      	mov	r2, r8
 80042de:	189b      	adds	r3, r3, r2
 80042e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042e2:	464b      	mov	r3, r9
 80042e4:	460a      	mov	r2, r1
 80042e6:	eb42 0303 	adc.w	r3, r2, r3
 80042ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80042f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004304:	4649      	mov	r1, r9
 8004306:	008b      	lsls	r3, r1, #2
 8004308:	4641      	mov	r1, r8
 800430a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800430e:	4641      	mov	r1, r8
 8004310:	008a      	lsls	r2, r1, #2
 8004312:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004316:	f7fb ffab 	bl	8000270 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <UART_SetConfig+0x4e4>)
 8004320:	fba3 1302 	umull	r1, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	2164      	movs	r1, #100	@ 0x64
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	3332      	adds	r3, #50	@ 0x32
 8004332:	4a08      	ldr	r2, [pc, #32]	@ (8004354 <UART_SetConfig+0x4e4>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	f003 020f 	and.w	r2, r3, #15
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4422      	add	r2, r4
 8004346:	609a      	str	r2, [r3, #8]
}
 8004348:	bf00      	nop
 800434a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800434e:	46bd      	mov	sp, r7
 8004350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004354:	51eb851f 	.word	0x51eb851f

08004358 <siprintf>:
 8004358:	b40e      	push	{r1, r2, r3}
 800435a:	b500      	push	{lr}
 800435c:	b09c      	sub	sp, #112	@ 0x70
 800435e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004360:	9002      	str	r0, [sp, #8]
 8004362:	9006      	str	r0, [sp, #24]
 8004364:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004368:	4809      	ldr	r0, [pc, #36]	@ (8004390 <siprintf+0x38>)
 800436a:	9107      	str	r1, [sp, #28]
 800436c:	9104      	str	r1, [sp, #16]
 800436e:	4909      	ldr	r1, [pc, #36]	@ (8004394 <siprintf+0x3c>)
 8004370:	f853 2b04 	ldr.w	r2, [r3], #4
 8004374:	9105      	str	r1, [sp, #20]
 8004376:	6800      	ldr	r0, [r0, #0]
 8004378:	9301      	str	r3, [sp, #4]
 800437a:	a902      	add	r1, sp, #8
 800437c:	f000 f994 	bl	80046a8 <_svfiprintf_r>
 8004380:	9b02      	ldr	r3, [sp, #8]
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	b01c      	add	sp, #112	@ 0x70
 8004388:	f85d eb04 	ldr.w	lr, [sp], #4
 800438c:	b003      	add	sp, #12
 800438e:	4770      	bx	lr
 8004390:	2000002c 	.word	0x2000002c
 8004394:	ffff0208 	.word	0xffff0208

08004398 <memset>:
 8004398:	4402      	add	r2, r0
 800439a:	4603      	mov	r3, r0
 800439c:	4293      	cmp	r3, r2
 800439e:	d100      	bne.n	80043a2 <memset+0xa>
 80043a0:	4770      	bx	lr
 80043a2:	f803 1b01 	strb.w	r1, [r3], #1
 80043a6:	e7f9      	b.n	800439c <memset+0x4>

080043a8 <__errno>:
 80043a8:	4b01      	ldr	r3, [pc, #4]	@ (80043b0 <__errno+0x8>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	2000002c 	.word	0x2000002c

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4d0d      	ldr	r5, [pc, #52]	@ (80043ec <__libc_init_array+0x38>)
 80043b8:	4c0d      	ldr	r4, [pc, #52]	@ (80043f0 <__libc_init_array+0x3c>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	2600      	movs	r6, #0
 80043c0:	42a6      	cmp	r6, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	4d0b      	ldr	r5, [pc, #44]	@ (80043f4 <__libc_init_array+0x40>)
 80043c6:	4c0c      	ldr	r4, [pc, #48]	@ (80043f8 <__libc_init_array+0x44>)
 80043c8:	f000 fc66 	bl	8004c98 <_init>
 80043cc:	1b64      	subs	r4, r4, r5
 80043ce:	10a4      	asrs	r4, r4, #2
 80043d0:	2600      	movs	r6, #0
 80043d2:	42a6      	cmp	r6, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043dc:	4798      	blx	r3
 80043de:	3601      	adds	r6, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e6:	4798      	blx	r3
 80043e8:	3601      	adds	r6, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	08004d7c 	.word	0x08004d7c
 80043f0:	08004d7c 	.word	0x08004d7c
 80043f4:	08004d7c 	.word	0x08004d7c
 80043f8:	08004d80 	.word	0x08004d80

080043fc <__retarget_lock_acquire_recursive>:
 80043fc:	4770      	bx	lr

080043fe <__retarget_lock_release_recursive>:
 80043fe:	4770      	bx	lr

08004400 <_free_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	4605      	mov	r5, r0
 8004404:	2900      	cmp	r1, #0
 8004406:	d041      	beq.n	800448c <_free_r+0x8c>
 8004408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800440c:	1f0c      	subs	r4, r1, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	bfb8      	it	lt
 8004412:	18e4      	addlt	r4, r4, r3
 8004414:	f000 f8e0 	bl	80045d8 <__malloc_lock>
 8004418:	4a1d      	ldr	r2, [pc, #116]	@ (8004490 <_free_r+0x90>)
 800441a:	6813      	ldr	r3, [r2, #0]
 800441c:	b933      	cbnz	r3, 800442c <_free_r+0x2c>
 800441e:	6063      	str	r3, [r4, #4]
 8004420:	6014      	str	r4, [r2, #0]
 8004422:	4628      	mov	r0, r5
 8004424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004428:	f000 b8dc 	b.w	80045e4 <__malloc_unlock>
 800442c:	42a3      	cmp	r3, r4
 800442e:	d908      	bls.n	8004442 <_free_r+0x42>
 8004430:	6820      	ldr	r0, [r4, #0]
 8004432:	1821      	adds	r1, r4, r0
 8004434:	428b      	cmp	r3, r1
 8004436:	bf01      	itttt	eq
 8004438:	6819      	ldreq	r1, [r3, #0]
 800443a:	685b      	ldreq	r3, [r3, #4]
 800443c:	1809      	addeq	r1, r1, r0
 800443e:	6021      	streq	r1, [r4, #0]
 8004440:	e7ed      	b.n	800441e <_free_r+0x1e>
 8004442:	461a      	mov	r2, r3
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	b10b      	cbz	r3, 800444c <_free_r+0x4c>
 8004448:	42a3      	cmp	r3, r4
 800444a:	d9fa      	bls.n	8004442 <_free_r+0x42>
 800444c:	6811      	ldr	r1, [r2, #0]
 800444e:	1850      	adds	r0, r2, r1
 8004450:	42a0      	cmp	r0, r4
 8004452:	d10b      	bne.n	800446c <_free_r+0x6c>
 8004454:	6820      	ldr	r0, [r4, #0]
 8004456:	4401      	add	r1, r0
 8004458:	1850      	adds	r0, r2, r1
 800445a:	4283      	cmp	r3, r0
 800445c:	6011      	str	r1, [r2, #0]
 800445e:	d1e0      	bne.n	8004422 <_free_r+0x22>
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	6053      	str	r3, [r2, #4]
 8004466:	4408      	add	r0, r1
 8004468:	6010      	str	r0, [r2, #0]
 800446a:	e7da      	b.n	8004422 <_free_r+0x22>
 800446c:	d902      	bls.n	8004474 <_free_r+0x74>
 800446e:	230c      	movs	r3, #12
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	e7d6      	b.n	8004422 <_free_r+0x22>
 8004474:	6820      	ldr	r0, [r4, #0]
 8004476:	1821      	adds	r1, r4, r0
 8004478:	428b      	cmp	r3, r1
 800447a:	bf04      	itt	eq
 800447c:	6819      	ldreq	r1, [r3, #0]
 800447e:	685b      	ldreq	r3, [r3, #4]
 8004480:	6063      	str	r3, [r4, #4]
 8004482:	bf04      	itt	eq
 8004484:	1809      	addeq	r1, r1, r0
 8004486:	6021      	streq	r1, [r4, #0]
 8004488:	6054      	str	r4, [r2, #4]
 800448a:	e7ca      	b.n	8004422 <_free_r+0x22>
 800448c:	bd38      	pop	{r3, r4, r5, pc}
 800448e:	bf00      	nop
 8004490:	20001370 	.word	0x20001370

08004494 <sbrk_aligned>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4e0f      	ldr	r6, [pc, #60]	@ (80044d4 <sbrk_aligned+0x40>)
 8004498:	460c      	mov	r4, r1
 800449a:	6831      	ldr	r1, [r6, #0]
 800449c:	4605      	mov	r5, r0
 800449e:	b911      	cbnz	r1, 80044a6 <sbrk_aligned+0x12>
 80044a0:	f000 fba6 	bl	8004bf0 <_sbrk_r>
 80044a4:	6030      	str	r0, [r6, #0]
 80044a6:	4621      	mov	r1, r4
 80044a8:	4628      	mov	r0, r5
 80044aa:	f000 fba1 	bl	8004bf0 <_sbrk_r>
 80044ae:	1c43      	adds	r3, r0, #1
 80044b0:	d103      	bne.n	80044ba <sbrk_aligned+0x26>
 80044b2:	f04f 34ff 	mov.w	r4, #4294967295
 80044b6:	4620      	mov	r0, r4
 80044b8:	bd70      	pop	{r4, r5, r6, pc}
 80044ba:	1cc4      	adds	r4, r0, #3
 80044bc:	f024 0403 	bic.w	r4, r4, #3
 80044c0:	42a0      	cmp	r0, r4
 80044c2:	d0f8      	beq.n	80044b6 <sbrk_aligned+0x22>
 80044c4:	1a21      	subs	r1, r4, r0
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 fb92 	bl	8004bf0 <_sbrk_r>
 80044cc:	3001      	adds	r0, #1
 80044ce:	d1f2      	bne.n	80044b6 <sbrk_aligned+0x22>
 80044d0:	e7ef      	b.n	80044b2 <sbrk_aligned+0x1e>
 80044d2:	bf00      	nop
 80044d4:	2000136c 	.word	0x2000136c

080044d8 <_malloc_r>:
 80044d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044dc:	1ccd      	adds	r5, r1, #3
 80044de:	f025 0503 	bic.w	r5, r5, #3
 80044e2:	3508      	adds	r5, #8
 80044e4:	2d0c      	cmp	r5, #12
 80044e6:	bf38      	it	cc
 80044e8:	250c      	movcc	r5, #12
 80044ea:	2d00      	cmp	r5, #0
 80044ec:	4606      	mov	r6, r0
 80044ee:	db01      	blt.n	80044f4 <_malloc_r+0x1c>
 80044f0:	42a9      	cmp	r1, r5
 80044f2:	d904      	bls.n	80044fe <_malloc_r+0x26>
 80044f4:	230c      	movs	r3, #12
 80044f6:	6033      	str	r3, [r6, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045d4 <_malloc_r+0xfc>
 8004502:	f000 f869 	bl	80045d8 <__malloc_lock>
 8004506:	f8d8 3000 	ldr.w	r3, [r8]
 800450a:	461c      	mov	r4, r3
 800450c:	bb44      	cbnz	r4, 8004560 <_malloc_r+0x88>
 800450e:	4629      	mov	r1, r5
 8004510:	4630      	mov	r0, r6
 8004512:	f7ff ffbf 	bl	8004494 <sbrk_aligned>
 8004516:	1c43      	adds	r3, r0, #1
 8004518:	4604      	mov	r4, r0
 800451a:	d158      	bne.n	80045ce <_malloc_r+0xf6>
 800451c:	f8d8 4000 	ldr.w	r4, [r8]
 8004520:	4627      	mov	r7, r4
 8004522:	2f00      	cmp	r7, #0
 8004524:	d143      	bne.n	80045ae <_malloc_r+0xd6>
 8004526:	2c00      	cmp	r4, #0
 8004528:	d04b      	beq.n	80045c2 <_malloc_r+0xea>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	4639      	mov	r1, r7
 800452e:	4630      	mov	r0, r6
 8004530:	eb04 0903 	add.w	r9, r4, r3
 8004534:	f000 fb5c 	bl	8004bf0 <_sbrk_r>
 8004538:	4581      	cmp	r9, r0
 800453a:	d142      	bne.n	80045c2 <_malloc_r+0xea>
 800453c:	6821      	ldr	r1, [r4, #0]
 800453e:	1a6d      	subs	r5, r5, r1
 8004540:	4629      	mov	r1, r5
 8004542:	4630      	mov	r0, r6
 8004544:	f7ff ffa6 	bl	8004494 <sbrk_aligned>
 8004548:	3001      	adds	r0, #1
 800454a:	d03a      	beq.n	80045c2 <_malloc_r+0xea>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	442b      	add	r3, r5
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	f8d8 3000 	ldr.w	r3, [r8]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	bb62      	cbnz	r2, 80045b4 <_malloc_r+0xdc>
 800455a:	f8c8 7000 	str.w	r7, [r8]
 800455e:	e00f      	b.n	8004580 <_malloc_r+0xa8>
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	1b52      	subs	r2, r2, r5
 8004564:	d420      	bmi.n	80045a8 <_malloc_r+0xd0>
 8004566:	2a0b      	cmp	r2, #11
 8004568:	d917      	bls.n	800459a <_malloc_r+0xc2>
 800456a:	1961      	adds	r1, r4, r5
 800456c:	42a3      	cmp	r3, r4
 800456e:	6025      	str	r5, [r4, #0]
 8004570:	bf18      	it	ne
 8004572:	6059      	strne	r1, [r3, #4]
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	bf08      	it	eq
 8004578:	f8c8 1000 	streq.w	r1, [r8]
 800457c:	5162      	str	r2, [r4, r5]
 800457e:	604b      	str	r3, [r1, #4]
 8004580:	4630      	mov	r0, r6
 8004582:	f000 f82f 	bl	80045e4 <__malloc_unlock>
 8004586:	f104 000b 	add.w	r0, r4, #11
 800458a:	1d23      	adds	r3, r4, #4
 800458c:	f020 0007 	bic.w	r0, r0, #7
 8004590:	1ac2      	subs	r2, r0, r3
 8004592:	bf1c      	itt	ne
 8004594:	1a1b      	subne	r3, r3, r0
 8004596:	50a3      	strne	r3, [r4, r2]
 8004598:	e7af      	b.n	80044fa <_malloc_r+0x22>
 800459a:	6862      	ldr	r2, [r4, #4]
 800459c:	42a3      	cmp	r3, r4
 800459e:	bf0c      	ite	eq
 80045a0:	f8c8 2000 	streq.w	r2, [r8]
 80045a4:	605a      	strne	r2, [r3, #4]
 80045a6:	e7eb      	b.n	8004580 <_malloc_r+0xa8>
 80045a8:	4623      	mov	r3, r4
 80045aa:	6864      	ldr	r4, [r4, #4]
 80045ac:	e7ae      	b.n	800450c <_malloc_r+0x34>
 80045ae:	463c      	mov	r4, r7
 80045b0:	687f      	ldr	r7, [r7, #4]
 80045b2:	e7b6      	b.n	8004522 <_malloc_r+0x4a>
 80045b4:	461a      	mov	r2, r3
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	42a3      	cmp	r3, r4
 80045ba:	d1fb      	bne.n	80045b4 <_malloc_r+0xdc>
 80045bc:	2300      	movs	r3, #0
 80045be:	6053      	str	r3, [r2, #4]
 80045c0:	e7de      	b.n	8004580 <_malloc_r+0xa8>
 80045c2:	230c      	movs	r3, #12
 80045c4:	6033      	str	r3, [r6, #0]
 80045c6:	4630      	mov	r0, r6
 80045c8:	f000 f80c 	bl	80045e4 <__malloc_unlock>
 80045cc:	e794      	b.n	80044f8 <_malloc_r+0x20>
 80045ce:	6005      	str	r5, [r0, #0]
 80045d0:	e7d6      	b.n	8004580 <_malloc_r+0xa8>
 80045d2:	bf00      	nop
 80045d4:	20001370 	.word	0x20001370

080045d8 <__malloc_lock>:
 80045d8:	4801      	ldr	r0, [pc, #4]	@ (80045e0 <__malloc_lock+0x8>)
 80045da:	f7ff bf0f 	b.w	80043fc <__retarget_lock_acquire_recursive>
 80045de:	bf00      	nop
 80045e0:	20001368 	.word	0x20001368

080045e4 <__malloc_unlock>:
 80045e4:	4801      	ldr	r0, [pc, #4]	@ (80045ec <__malloc_unlock+0x8>)
 80045e6:	f7ff bf0a 	b.w	80043fe <__retarget_lock_release_recursive>
 80045ea:	bf00      	nop
 80045ec:	20001368 	.word	0x20001368

080045f0 <__ssputs_r>:
 80045f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f4:	688e      	ldr	r6, [r1, #8]
 80045f6:	461f      	mov	r7, r3
 80045f8:	42be      	cmp	r6, r7
 80045fa:	680b      	ldr	r3, [r1, #0]
 80045fc:	4682      	mov	sl, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	4690      	mov	r8, r2
 8004602:	d82d      	bhi.n	8004660 <__ssputs_r+0x70>
 8004604:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004608:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800460c:	d026      	beq.n	800465c <__ssputs_r+0x6c>
 800460e:	6965      	ldr	r5, [r4, #20]
 8004610:	6909      	ldr	r1, [r1, #16]
 8004612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004616:	eba3 0901 	sub.w	r9, r3, r1
 800461a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800461e:	1c7b      	adds	r3, r7, #1
 8004620:	444b      	add	r3, r9
 8004622:	106d      	asrs	r5, r5, #1
 8004624:	429d      	cmp	r5, r3
 8004626:	bf38      	it	cc
 8004628:	461d      	movcc	r5, r3
 800462a:	0553      	lsls	r3, r2, #21
 800462c:	d527      	bpl.n	800467e <__ssputs_r+0x8e>
 800462e:	4629      	mov	r1, r5
 8004630:	f7ff ff52 	bl	80044d8 <_malloc_r>
 8004634:	4606      	mov	r6, r0
 8004636:	b360      	cbz	r0, 8004692 <__ssputs_r+0xa2>
 8004638:	6921      	ldr	r1, [r4, #16]
 800463a:	464a      	mov	r2, r9
 800463c:	f000 fae8 	bl	8004c10 <memcpy>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	6126      	str	r6, [r4, #16]
 800464e:	6165      	str	r5, [r4, #20]
 8004650:	444e      	add	r6, r9
 8004652:	eba5 0509 	sub.w	r5, r5, r9
 8004656:	6026      	str	r6, [r4, #0]
 8004658:	60a5      	str	r5, [r4, #8]
 800465a:	463e      	mov	r6, r7
 800465c:	42be      	cmp	r6, r7
 800465e:	d900      	bls.n	8004662 <__ssputs_r+0x72>
 8004660:	463e      	mov	r6, r7
 8004662:	6820      	ldr	r0, [r4, #0]
 8004664:	4632      	mov	r2, r6
 8004666:	4641      	mov	r1, r8
 8004668:	f000 faa8 	bl	8004bbc <memmove>
 800466c:	68a3      	ldr	r3, [r4, #8]
 800466e:	1b9b      	subs	r3, r3, r6
 8004670:	60a3      	str	r3, [r4, #8]
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	4433      	add	r3, r6
 8004676:	6023      	str	r3, [r4, #0]
 8004678:	2000      	movs	r0, #0
 800467a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467e:	462a      	mov	r2, r5
 8004680:	f000 fad4 	bl	8004c2c <_realloc_r>
 8004684:	4606      	mov	r6, r0
 8004686:	2800      	cmp	r0, #0
 8004688:	d1e0      	bne.n	800464c <__ssputs_r+0x5c>
 800468a:	6921      	ldr	r1, [r4, #16]
 800468c:	4650      	mov	r0, sl
 800468e:	f7ff feb7 	bl	8004400 <_free_r>
 8004692:	230c      	movs	r3, #12
 8004694:	f8ca 3000 	str.w	r3, [sl]
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800469e:	81a3      	strh	r3, [r4, #12]
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	e7e9      	b.n	800467a <__ssputs_r+0x8a>
	...

080046a8 <_svfiprintf_r>:
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	4698      	mov	r8, r3
 80046ae:	898b      	ldrh	r3, [r1, #12]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	b09d      	sub	sp, #116	@ 0x74
 80046b4:	4607      	mov	r7, r0
 80046b6:	460d      	mov	r5, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	d510      	bpl.n	80046de <_svfiprintf_r+0x36>
 80046bc:	690b      	ldr	r3, [r1, #16]
 80046be:	b973      	cbnz	r3, 80046de <_svfiprintf_r+0x36>
 80046c0:	2140      	movs	r1, #64	@ 0x40
 80046c2:	f7ff ff09 	bl	80044d8 <_malloc_r>
 80046c6:	6028      	str	r0, [r5, #0]
 80046c8:	6128      	str	r0, [r5, #16]
 80046ca:	b930      	cbnz	r0, 80046da <_svfiprintf_r+0x32>
 80046cc:	230c      	movs	r3, #12
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	b01d      	add	sp, #116	@ 0x74
 80046d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046da:	2340      	movs	r3, #64	@ 0x40
 80046dc:	616b      	str	r3, [r5, #20]
 80046de:	2300      	movs	r3, #0
 80046e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80046e2:	2320      	movs	r3, #32
 80046e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80046ec:	2330      	movs	r3, #48	@ 0x30
 80046ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800488c <_svfiprintf_r+0x1e4>
 80046f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046f6:	f04f 0901 	mov.w	r9, #1
 80046fa:	4623      	mov	r3, r4
 80046fc:	469a      	mov	sl, r3
 80046fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004702:	b10a      	cbz	r2, 8004708 <_svfiprintf_r+0x60>
 8004704:	2a25      	cmp	r2, #37	@ 0x25
 8004706:	d1f9      	bne.n	80046fc <_svfiprintf_r+0x54>
 8004708:	ebba 0b04 	subs.w	fp, sl, r4
 800470c:	d00b      	beq.n	8004726 <_svfiprintf_r+0x7e>
 800470e:	465b      	mov	r3, fp
 8004710:	4622      	mov	r2, r4
 8004712:	4629      	mov	r1, r5
 8004714:	4638      	mov	r0, r7
 8004716:	f7ff ff6b 	bl	80045f0 <__ssputs_r>
 800471a:	3001      	adds	r0, #1
 800471c:	f000 80a7 	beq.w	800486e <_svfiprintf_r+0x1c6>
 8004720:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004722:	445a      	add	r2, fp
 8004724:	9209      	str	r2, [sp, #36]	@ 0x24
 8004726:	f89a 3000 	ldrb.w	r3, [sl]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 809f 	beq.w	800486e <_svfiprintf_r+0x1c6>
 8004730:	2300      	movs	r3, #0
 8004732:	f04f 32ff 	mov.w	r2, #4294967295
 8004736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800473a:	f10a 0a01 	add.w	sl, sl, #1
 800473e:	9304      	str	r3, [sp, #16]
 8004740:	9307      	str	r3, [sp, #28]
 8004742:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004746:	931a      	str	r3, [sp, #104]	@ 0x68
 8004748:	4654      	mov	r4, sl
 800474a:	2205      	movs	r2, #5
 800474c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004750:	484e      	ldr	r0, [pc, #312]	@ (800488c <_svfiprintf_r+0x1e4>)
 8004752:	f7fb fd3d 	bl	80001d0 <memchr>
 8004756:	9a04      	ldr	r2, [sp, #16]
 8004758:	b9d8      	cbnz	r0, 8004792 <_svfiprintf_r+0xea>
 800475a:	06d0      	lsls	r0, r2, #27
 800475c:	bf44      	itt	mi
 800475e:	2320      	movmi	r3, #32
 8004760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004764:	0711      	lsls	r1, r2, #28
 8004766:	bf44      	itt	mi
 8004768:	232b      	movmi	r3, #43	@ 0x2b
 800476a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800476e:	f89a 3000 	ldrb.w	r3, [sl]
 8004772:	2b2a      	cmp	r3, #42	@ 0x2a
 8004774:	d015      	beq.n	80047a2 <_svfiprintf_r+0xfa>
 8004776:	9a07      	ldr	r2, [sp, #28]
 8004778:	4654      	mov	r4, sl
 800477a:	2000      	movs	r0, #0
 800477c:	f04f 0c0a 	mov.w	ip, #10
 8004780:	4621      	mov	r1, r4
 8004782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004786:	3b30      	subs	r3, #48	@ 0x30
 8004788:	2b09      	cmp	r3, #9
 800478a:	d94b      	bls.n	8004824 <_svfiprintf_r+0x17c>
 800478c:	b1b0      	cbz	r0, 80047bc <_svfiprintf_r+0x114>
 800478e:	9207      	str	r2, [sp, #28]
 8004790:	e014      	b.n	80047bc <_svfiprintf_r+0x114>
 8004792:	eba0 0308 	sub.w	r3, r0, r8
 8004796:	fa09 f303 	lsl.w	r3, r9, r3
 800479a:	4313      	orrs	r3, r2
 800479c:	9304      	str	r3, [sp, #16]
 800479e:	46a2      	mov	sl, r4
 80047a0:	e7d2      	b.n	8004748 <_svfiprintf_r+0xa0>
 80047a2:	9b03      	ldr	r3, [sp, #12]
 80047a4:	1d19      	adds	r1, r3, #4
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	9103      	str	r1, [sp, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bfbb      	ittet	lt
 80047ae:	425b      	neglt	r3, r3
 80047b0:	f042 0202 	orrlt.w	r2, r2, #2
 80047b4:	9307      	strge	r3, [sp, #28]
 80047b6:	9307      	strlt	r3, [sp, #28]
 80047b8:	bfb8      	it	lt
 80047ba:	9204      	strlt	r2, [sp, #16]
 80047bc:	7823      	ldrb	r3, [r4, #0]
 80047be:	2b2e      	cmp	r3, #46	@ 0x2e
 80047c0:	d10a      	bne.n	80047d8 <_svfiprintf_r+0x130>
 80047c2:	7863      	ldrb	r3, [r4, #1]
 80047c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80047c6:	d132      	bne.n	800482e <_svfiprintf_r+0x186>
 80047c8:	9b03      	ldr	r3, [sp, #12]
 80047ca:	1d1a      	adds	r2, r3, #4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	9203      	str	r2, [sp, #12]
 80047d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047d4:	3402      	adds	r4, #2
 80047d6:	9305      	str	r3, [sp, #20]
 80047d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800489c <_svfiprintf_r+0x1f4>
 80047dc:	7821      	ldrb	r1, [r4, #0]
 80047de:	2203      	movs	r2, #3
 80047e0:	4650      	mov	r0, sl
 80047e2:	f7fb fcf5 	bl	80001d0 <memchr>
 80047e6:	b138      	cbz	r0, 80047f8 <_svfiprintf_r+0x150>
 80047e8:	9b04      	ldr	r3, [sp, #16]
 80047ea:	eba0 000a 	sub.w	r0, r0, sl
 80047ee:	2240      	movs	r2, #64	@ 0x40
 80047f0:	4082      	lsls	r2, r0
 80047f2:	4313      	orrs	r3, r2
 80047f4:	3401      	adds	r4, #1
 80047f6:	9304      	str	r3, [sp, #16]
 80047f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047fc:	4824      	ldr	r0, [pc, #144]	@ (8004890 <_svfiprintf_r+0x1e8>)
 80047fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004802:	2206      	movs	r2, #6
 8004804:	f7fb fce4 	bl	80001d0 <memchr>
 8004808:	2800      	cmp	r0, #0
 800480a:	d036      	beq.n	800487a <_svfiprintf_r+0x1d2>
 800480c:	4b21      	ldr	r3, [pc, #132]	@ (8004894 <_svfiprintf_r+0x1ec>)
 800480e:	bb1b      	cbnz	r3, 8004858 <_svfiprintf_r+0x1b0>
 8004810:	9b03      	ldr	r3, [sp, #12]
 8004812:	3307      	adds	r3, #7
 8004814:	f023 0307 	bic.w	r3, r3, #7
 8004818:	3308      	adds	r3, #8
 800481a:	9303      	str	r3, [sp, #12]
 800481c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800481e:	4433      	add	r3, r6
 8004820:	9309      	str	r3, [sp, #36]	@ 0x24
 8004822:	e76a      	b.n	80046fa <_svfiprintf_r+0x52>
 8004824:	fb0c 3202 	mla	r2, ip, r2, r3
 8004828:	460c      	mov	r4, r1
 800482a:	2001      	movs	r0, #1
 800482c:	e7a8      	b.n	8004780 <_svfiprintf_r+0xd8>
 800482e:	2300      	movs	r3, #0
 8004830:	3401      	adds	r4, #1
 8004832:	9305      	str	r3, [sp, #20]
 8004834:	4619      	mov	r1, r3
 8004836:	f04f 0c0a 	mov.w	ip, #10
 800483a:	4620      	mov	r0, r4
 800483c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004840:	3a30      	subs	r2, #48	@ 0x30
 8004842:	2a09      	cmp	r2, #9
 8004844:	d903      	bls.n	800484e <_svfiprintf_r+0x1a6>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0c6      	beq.n	80047d8 <_svfiprintf_r+0x130>
 800484a:	9105      	str	r1, [sp, #20]
 800484c:	e7c4      	b.n	80047d8 <_svfiprintf_r+0x130>
 800484e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004852:	4604      	mov	r4, r0
 8004854:	2301      	movs	r3, #1
 8004856:	e7f0      	b.n	800483a <_svfiprintf_r+0x192>
 8004858:	ab03      	add	r3, sp, #12
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	462a      	mov	r2, r5
 800485e:	4b0e      	ldr	r3, [pc, #56]	@ (8004898 <_svfiprintf_r+0x1f0>)
 8004860:	a904      	add	r1, sp, #16
 8004862:	4638      	mov	r0, r7
 8004864:	f3af 8000 	nop.w
 8004868:	1c42      	adds	r2, r0, #1
 800486a:	4606      	mov	r6, r0
 800486c:	d1d6      	bne.n	800481c <_svfiprintf_r+0x174>
 800486e:	89ab      	ldrh	r3, [r5, #12]
 8004870:	065b      	lsls	r3, r3, #25
 8004872:	f53f af2d 	bmi.w	80046d0 <_svfiprintf_r+0x28>
 8004876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004878:	e72c      	b.n	80046d4 <_svfiprintf_r+0x2c>
 800487a:	ab03      	add	r3, sp, #12
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	462a      	mov	r2, r5
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <_svfiprintf_r+0x1f0>)
 8004882:	a904      	add	r1, sp, #16
 8004884:	4638      	mov	r0, r7
 8004886:	f000 f879 	bl	800497c <_printf_i>
 800488a:	e7ed      	b.n	8004868 <_svfiprintf_r+0x1c0>
 800488c:	08004d40 	.word	0x08004d40
 8004890:	08004d4a 	.word	0x08004d4a
 8004894:	00000000 	.word	0x00000000
 8004898:	080045f1 	.word	0x080045f1
 800489c:	08004d46 	.word	0x08004d46

080048a0 <_printf_common>:
 80048a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a4:	4616      	mov	r6, r2
 80048a6:	4698      	mov	r8, r3
 80048a8:	688a      	ldr	r2, [r1, #8]
 80048aa:	690b      	ldr	r3, [r1, #16]
 80048ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048b0:	4293      	cmp	r3, r2
 80048b2:	bfb8      	it	lt
 80048b4:	4613      	movlt	r3, r2
 80048b6:	6033      	str	r3, [r6, #0]
 80048b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048bc:	4607      	mov	r7, r0
 80048be:	460c      	mov	r4, r1
 80048c0:	b10a      	cbz	r2, 80048c6 <_printf_common+0x26>
 80048c2:	3301      	adds	r3, #1
 80048c4:	6033      	str	r3, [r6, #0]
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	0699      	lsls	r1, r3, #26
 80048ca:	bf42      	ittt	mi
 80048cc:	6833      	ldrmi	r3, [r6, #0]
 80048ce:	3302      	addmi	r3, #2
 80048d0:	6033      	strmi	r3, [r6, #0]
 80048d2:	6825      	ldr	r5, [r4, #0]
 80048d4:	f015 0506 	ands.w	r5, r5, #6
 80048d8:	d106      	bne.n	80048e8 <_printf_common+0x48>
 80048da:	f104 0a19 	add.w	sl, r4, #25
 80048de:	68e3      	ldr	r3, [r4, #12]
 80048e0:	6832      	ldr	r2, [r6, #0]
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	42ab      	cmp	r3, r5
 80048e6:	dc26      	bgt.n	8004936 <_printf_common+0x96>
 80048e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048ec:	6822      	ldr	r2, [r4, #0]
 80048ee:	3b00      	subs	r3, #0
 80048f0:	bf18      	it	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	0692      	lsls	r2, r2, #26
 80048f6:	d42b      	bmi.n	8004950 <_printf_common+0xb0>
 80048f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048fc:	4641      	mov	r1, r8
 80048fe:	4638      	mov	r0, r7
 8004900:	47c8      	blx	r9
 8004902:	3001      	adds	r0, #1
 8004904:	d01e      	beq.n	8004944 <_printf_common+0xa4>
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	6922      	ldr	r2, [r4, #16]
 800490a:	f003 0306 	and.w	r3, r3, #6
 800490e:	2b04      	cmp	r3, #4
 8004910:	bf02      	ittt	eq
 8004912:	68e5      	ldreq	r5, [r4, #12]
 8004914:	6833      	ldreq	r3, [r6, #0]
 8004916:	1aed      	subeq	r5, r5, r3
 8004918:	68a3      	ldr	r3, [r4, #8]
 800491a:	bf0c      	ite	eq
 800491c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004920:	2500      	movne	r5, #0
 8004922:	4293      	cmp	r3, r2
 8004924:	bfc4      	itt	gt
 8004926:	1a9b      	subgt	r3, r3, r2
 8004928:	18ed      	addgt	r5, r5, r3
 800492a:	2600      	movs	r6, #0
 800492c:	341a      	adds	r4, #26
 800492e:	42b5      	cmp	r5, r6
 8004930:	d11a      	bne.n	8004968 <_printf_common+0xc8>
 8004932:	2000      	movs	r0, #0
 8004934:	e008      	b.n	8004948 <_printf_common+0xa8>
 8004936:	2301      	movs	r3, #1
 8004938:	4652      	mov	r2, sl
 800493a:	4641      	mov	r1, r8
 800493c:	4638      	mov	r0, r7
 800493e:	47c8      	blx	r9
 8004940:	3001      	adds	r0, #1
 8004942:	d103      	bne.n	800494c <_printf_common+0xac>
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494c:	3501      	adds	r5, #1
 800494e:	e7c6      	b.n	80048de <_printf_common+0x3e>
 8004950:	18e1      	adds	r1, r4, r3
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	2030      	movs	r0, #48	@ 0x30
 8004956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800495a:	4422      	add	r2, r4
 800495c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004964:	3302      	adds	r3, #2
 8004966:	e7c7      	b.n	80048f8 <_printf_common+0x58>
 8004968:	2301      	movs	r3, #1
 800496a:	4622      	mov	r2, r4
 800496c:	4641      	mov	r1, r8
 800496e:	4638      	mov	r0, r7
 8004970:	47c8      	blx	r9
 8004972:	3001      	adds	r0, #1
 8004974:	d0e6      	beq.n	8004944 <_printf_common+0xa4>
 8004976:	3601      	adds	r6, #1
 8004978:	e7d9      	b.n	800492e <_printf_common+0x8e>
	...

0800497c <_printf_i>:
 800497c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004980:	7e0f      	ldrb	r7, [r1, #24]
 8004982:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004984:	2f78      	cmp	r7, #120	@ 0x78
 8004986:	4691      	mov	r9, r2
 8004988:	4680      	mov	r8, r0
 800498a:	460c      	mov	r4, r1
 800498c:	469a      	mov	sl, r3
 800498e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004992:	d807      	bhi.n	80049a4 <_printf_i+0x28>
 8004994:	2f62      	cmp	r7, #98	@ 0x62
 8004996:	d80a      	bhi.n	80049ae <_printf_i+0x32>
 8004998:	2f00      	cmp	r7, #0
 800499a:	f000 80d2 	beq.w	8004b42 <_printf_i+0x1c6>
 800499e:	2f58      	cmp	r7, #88	@ 0x58
 80049a0:	f000 80b9 	beq.w	8004b16 <_printf_i+0x19a>
 80049a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049ac:	e03a      	b.n	8004a24 <_printf_i+0xa8>
 80049ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049b2:	2b15      	cmp	r3, #21
 80049b4:	d8f6      	bhi.n	80049a4 <_printf_i+0x28>
 80049b6:	a101      	add	r1, pc, #4	@ (adr r1, 80049bc <_printf_i+0x40>)
 80049b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049bc:	08004a15 	.word	0x08004a15
 80049c0:	08004a29 	.word	0x08004a29
 80049c4:	080049a5 	.word	0x080049a5
 80049c8:	080049a5 	.word	0x080049a5
 80049cc:	080049a5 	.word	0x080049a5
 80049d0:	080049a5 	.word	0x080049a5
 80049d4:	08004a29 	.word	0x08004a29
 80049d8:	080049a5 	.word	0x080049a5
 80049dc:	080049a5 	.word	0x080049a5
 80049e0:	080049a5 	.word	0x080049a5
 80049e4:	080049a5 	.word	0x080049a5
 80049e8:	08004b29 	.word	0x08004b29
 80049ec:	08004a53 	.word	0x08004a53
 80049f0:	08004ae3 	.word	0x08004ae3
 80049f4:	080049a5 	.word	0x080049a5
 80049f8:	080049a5 	.word	0x080049a5
 80049fc:	08004b4b 	.word	0x08004b4b
 8004a00:	080049a5 	.word	0x080049a5
 8004a04:	08004a53 	.word	0x08004a53
 8004a08:	080049a5 	.word	0x080049a5
 8004a0c:	080049a5 	.word	0x080049a5
 8004a10:	08004aeb 	.word	0x08004aeb
 8004a14:	6833      	ldr	r3, [r6, #0]
 8004a16:	1d1a      	adds	r2, r3, #4
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6032      	str	r2, [r6, #0]
 8004a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a24:	2301      	movs	r3, #1
 8004a26:	e09d      	b.n	8004b64 <_printf_i+0x1e8>
 8004a28:	6833      	ldr	r3, [r6, #0]
 8004a2a:	6820      	ldr	r0, [r4, #0]
 8004a2c:	1d19      	adds	r1, r3, #4
 8004a2e:	6031      	str	r1, [r6, #0]
 8004a30:	0606      	lsls	r6, r0, #24
 8004a32:	d501      	bpl.n	8004a38 <_printf_i+0xbc>
 8004a34:	681d      	ldr	r5, [r3, #0]
 8004a36:	e003      	b.n	8004a40 <_printf_i+0xc4>
 8004a38:	0645      	lsls	r5, r0, #25
 8004a3a:	d5fb      	bpl.n	8004a34 <_printf_i+0xb8>
 8004a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a40:	2d00      	cmp	r5, #0
 8004a42:	da03      	bge.n	8004a4c <_printf_i+0xd0>
 8004a44:	232d      	movs	r3, #45	@ 0x2d
 8004a46:	426d      	negs	r5, r5
 8004a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a4c:	4859      	ldr	r0, [pc, #356]	@ (8004bb4 <_printf_i+0x238>)
 8004a4e:	230a      	movs	r3, #10
 8004a50:	e011      	b.n	8004a76 <_printf_i+0xfa>
 8004a52:	6821      	ldr	r1, [r4, #0]
 8004a54:	6833      	ldr	r3, [r6, #0]
 8004a56:	0608      	lsls	r0, r1, #24
 8004a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a5c:	d402      	bmi.n	8004a64 <_printf_i+0xe8>
 8004a5e:	0649      	lsls	r1, r1, #25
 8004a60:	bf48      	it	mi
 8004a62:	b2ad      	uxthmi	r5, r5
 8004a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a66:	4853      	ldr	r0, [pc, #332]	@ (8004bb4 <_printf_i+0x238>)
 8004a68:	6033      	str	r3, [r6, #0]
 8004a6a:	bf14      	ite	ne
 8004a6c:	230a      	movne	r3, #10
 8004a6e:	2308      	moveq	r3, #8
 8004a70:	2100      	movs	r1, #0
 8004a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a76:	6866      	ldr	r6, [r4, #4]
 8004a78:	60a6      	str	r6, [r4, #8]
 8004a7a:	2e00      	cmp	r6, #0
 8004a7c:	bfa2      	ittt	ge
 8004a7e:	6821      	ldrge	r1, [r4, #0]
 8004a80:	f021 0104 	bicge.w	r1, r1, #4
 8004a84:	6021      	strge	r1, [r4, #0]
 8004a86:	b90d      	cbnz	r5, 8004a8c <_printf_i+0x110>
 8004a88:	2e00      	cmp	r6, #0
 8004a8a:	d04b      	beq.n	8004b24 <_printf_i+0x1a8>
 8004a8c:	4616      	mov	r6, r2
 8004a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a92:	fb03 5711 	mls	r7, r3, r1, r5
 8004a96:	5dc7      	ldrb	r7, [r0, r7]
 8004a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a9c:	462f      	mov	r7, r5
 8004a9e:	42bb      	cmp	r3, r7
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	d9f4      	bls.n	8004a8e <_printf_i+0x112>
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d10b      	bne.n	8004ac0 <_printf_i+0x144>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	07df      	lsls	r7, r3, #31
 8004aac:	d508      	bpl.n	8004ac0 <_printf_i+0x144>
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	6861      	ldr	r1, [r4, #4]
 8004ab2:	4299      	cmp	r1, r3
 8004ab4:	bfde      	ittt	le
 8004ab6:	2330      	movle	r3, #48	@ 0x30
 8004ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004abc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ac0:	1b92      	subs	r2, r2, r6
 8004ac2:	6122      	str	r2, [r4, #16]
 8004ac4:	f8cd a000 	str.w	sl, [sp]
 8004ac8:	464b      	mov	r3, r9
 8004aca:	aa03      	add	r2, sp, #12
 8004acc:	4621      	mov	r1, r4
 8004ace:	4640      	mov	r0, r8
 8004ad0:	f7ff fee6 	bl	80048a0 <_printf_common>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d14a      	bne.n	8004b6e <_printf_i+0x1f2>
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	b004      	add	sp, #16
 8004ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	f043 0320 	orr.w	r3, r3, #32
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	4833      	ldr	r0, [pc, #204]	@ (8004bb8 <_printf_i+0x23c>)
 8004aec:	2778      	movs	r7, #120	@ 0x78
 8004aee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	6831      	ldr	r1, [r6, #0]
 8004af6:	061f      	lsls	r7, r3, #24
 8004af8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004afc:	d402      	bmi.n	8004b04 <_printf_i+0x188>
 8004afe:	065f      	lsls	r7, r3, #25
 8004b00:	bf48      	it	mi
 8004b02:	b2ad      	uxthmi	r5, r5
 8004b04:	6031      	str	r1, [r6, #0]
 8004b06:	07d9      	lsls	r1, r3, #31
 8004b08:	bf44      	itt	mi
 8004b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b0e:	6023      	strmi	r3, [r4, #0]
 8004b10:	b11d      	cbz	r5, 8004b1a <_printf_i+0x19e>
 8004b12:	2310      	movs	r3, #16
 8004b14:	e7ac      	b.n	8004a70 <_printf_i+0xf4>
 8004b16:	4827      	ldr	r0, [pc, #156]	@ (8004bb4 <_printf_i+0x238>)
 8004b18:	e7e9      	b.n	8004aee <_printf_i+0x172>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	f023 0320 	bic.w	r3, r3, #32
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	e7f6      	b.n	8004b12 <_printf_i+0x196>
 8004b24:	4616      	mov	r6, r2
 8004b26:	e7bd      	b.n	8004aa4 <_printf_i+0x128>
 8004b28:	6833      	ldr	r3, [r6, #0]
 8004b2a:	6825      	ldr	r5, [r4, #0]
 8004b2c:	6961      	ldr	r1, [r4, #20]
 8004b2e:	1d18      	adds	r0, r3, #4
 8004b30:	6030      	str	r0, [r6, #0]
 8004b32:	062e      	lsls	r6, r5, #24
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	d501      	bpl.n	8004b3c <_printf_i+0x1c0>
 8004b38:	6019      	str	r1, [r3, #0]
 8004b3a:	e002      	b.n	8004b42 <_printf_i+0x1c6>
 8004b3c:	0668      	lsls	r0, r5, #25
 8004b3e:	d5fb      	bpl.n	8004b38 <_printf_i+0x1bc>
 8004b40:	8019      	strh	r1, [r3, #0]
 8004b42:	2300      	movs	r3, #0
 8004b44:	6123      	str	r3, [r4, #16]
 8004b46:	4616      	mov	r6, r2
 8004b48:	e7bc      	b.n	8004ac4 <_printf_i+0x148>
 8004b4a:	6833      	ldr	r3, [r6, #0]
 8004b4c:	1d1a      	adds	r2, r3, #4
 8004b4e:	6032      	str	r2, [r6, #0]
 8004b50:	681e      	ldr	r6, [r3, #0]
 8004b52:	6862      	ldr	r2, [r4, #4]
 8004b54:	2100      	movs	r1, #0
 8004b56:	4630      	mov	r0, r6
 8004b58:	f7fb fb3a 	bl	80001d0 <memchr>
 8004b5c:	b108      	cbz	r0, 8004b62 <_printf_i+0x1e6>
 8004b5e:	1b80      	subs	r0, r0, r6
 8004b60:	6060      	str	r0, [r4, #4]
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	6123      	str	r3, [r4, #16]
 8004b66:	2300      	movs	r3, #0
 8004b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b6c:	e7aa      	b.n	8004ac4 <_printf_i+0x148>
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	4632      	mov	r2, r6
 8004b72:	4649      	mov	r1, r9
 8004b74:	4640      	mov	r0, r8
 8004b76:	47d0      	blx	sl
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d0ad      	beq.n	8004ad8 <_printf_i+0x15c>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	079b      	lsls	r3, r3, #30
 8004b80:	d413      	bmi.n	8004baa <_printf_i+0x22e>
 8004b82:	68e0      	ldr	r0, [r4, #12]
 8004b84:	9b03      	ldr	r3, [sp, #12]
 8004b86:	4298      	cmp	r0, r3
 8004b88:	bfb8      	it	lt
 8004b8a:	4618      	movlt	r0, r3
 8004b8c:	e7a6      	b.n	8004adc <_printf_i+0x160>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4632      	mov	r2, r6
 8004b92:	4649      	mov	r1, r9
 8004b94:	4640      	mov	r0, r8
 8004b96:	47d0      	blx	sl
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d09d      	beq.n	8004ad8 <_printf_i+0x15c>
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	68e3      	ldr	r3, [r4, #12]
 8004ba0:	9903      	ldr	r1, [sp, #12]
 8004ba2:	1a5b      	subs	r3, r3, r1
 8004ba4:	42ab      	cmp	r3, r5
 8004ba6:	dcf2      	bgt.n	8004b8e <_printf_i+0x212>
 8004ba8:	e7eb      	b.n	8004b82 <_printf_i+0x206>
 8004baa:	2500      	movs	r5, #0
 8004bac:	f104 0619 	add.w	r6, r4, #25
 8004bb0:	e7f5      	b.n	8004b9e <_printf_i+0x222>
 8004bb2:	bf00      	nop
 8004bb4:	08004d51 	.word	0x08004d51
 8004bb8:	08004d62 	.word	0x08004d62

08004bbc <memmove>:
 8004bbc:	4288      	cmp	r0, r1
 8004bbe:	b510      	push	{r4, lr}
 8004bc0:	eb01 0402 	add.w	r4, r1, r2
 8004bc4:	d902      	bls.n	8004bcc <memmove+0x10>
 8004bc6:	4284      	cmp	r4, r0
 8004bc8:	4623      	mov	r3, r4
 8004bca:	d807      	bhi.n	8004bdc <memmove+0x20>
 8004bcc:	1e43      	subs	r3, r0, #1
 8004bce:	42a1      	cmp	r1, r4
 8004bd0:	d008      	beq.n	8004be4 <memmove+0x28>
 8004bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bda:	e7f8      	b.n	8004bce <memmove+0x12>
 8004bdc:	4402      	add	r2, r0
 8004bde:	4601      	mov	r1, r0
 8004be0:	428a      	cmp	r2, r1
 8004be2:	d100      	bne.n	8004be6 <memmove+0x2a>
 8004be4:	bd10      	pop	{r4, pc}
 8004be6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bee:	e7f7      	b.n	8004be0 <memmove+0x24>

08004bf0 <_sbrk_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4d06      	ldr	r5, [pc, #24]	@ (8004c0c <_sbrk_r+0x1c>)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	f7fc fc22 	bl	8001444 <_sbrk>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d102      	bne.n	8004c0a <_sbrk_r+0x1a>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b103      	cbz	r3, 8004c0a <_sbrk_r+0x1a>
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	bd38      	pop	{r3, r4, r5, pc}
 8004c0c:	20001364 	.word	0x20001364

08004c10 <memcpy>:
 8004c10:	440a      	add	r2, r1
 8004c12:	4291      	cmp	r1, r2
 8004c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c18:	d100      	bne.n	8004c1c <memcpy+0xc>
 8004c1a:	4770      	bx	lr
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c26:	4291      	cmp	r1, r2
 8004c28:	d1f9      	bne.n	8004c1e <memcpy+0xe>
 8004c2a:	bd10      	pop	{r4, pc}

08004c2c <_realloc_r>:
 8004c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c30:	4680      	mov	r8, r0
 8004c32:	4615      	mov	r5, r2
 8004c34:	460c      	mov	r4, r1
 8004c36:	b921      	cbnz	r1, 8004c42 <_realloc_r+0x16>
 8004c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	f7ff bc4b 	b.w	80044d8 <_malloc_r>
 8004c42:	b92a      	cbnz	r2, 8004c50 <_realloc_r+0x24>
 8004c44:	f7ff fbdc 	bl	8004400 <_free_r>
 8004c48:	2400      	movs	r4, #0
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c50:	f000 f81a 	bl	8004c88 <_malloc_usable_size_r>
 8004c54:	4285      	cmp	r5, r0
 8004c56:	4606      	mov	r6, r0
 8004c58:	d802      	bhi.n	8004c60 <_realloc_r+0x34>
 8004c5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c5e:	d8f4      	bhi.n	8004c4a <_realloc_r+0x1e>
 8004c60:	4629      	mov	r1, r5
 8004c62:	4640      	mov	r0, r8
 8004c64:	f7ff fc38 	bl	80044d8 <_malloc_r>
 8004c68:	4607      	mov	r7, r0
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d0ec      	beq.n	8004c48 <_realloc_r+0x1c>
 8004c6e:	42b5      	cmp	r5, r6
 8004c70:	462a      	mov	r2, r5
 8004c72:	4621      	mov	r1, r4
 8004c74:	bf28      	it	cs
 8004c76:	4632      	movcs	r2, r6
 8004c78:	f7ff ffca 	bl	8004c10 <memcpy>
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4640      	mov	r0, r8
 8004c80:	f7ff fbbe 	bl	8004400 <_free_r>
 8004c84:	463c      	mov	r4, r7
 8004c86:	e7e0      	b.n	8004c4a <_realloc_r+0x1e>

08004c88 <_malloc_usable_size_r>:
 8004c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c8c:	1f18      	subs	r0, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bfbc      	itt	lt
 8004c92:	580b      	ldrlt	r3, [r1, r0]
 8004c94:	18c0      	addlt	r0, r0, r3
 8004c96:	4770      	bx	lr

08004c98 <_init>:
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9a:	bf00      	nop
 8004c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9e:	bc08      	pop	{r3}
 8004ca0:	469e      	mov	lr, r3
 8004ca2:	4770      	bx	lr

08004ca4 <_fini>:
 8004ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca6:	bf00      	nop
 8004ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004caa:	bc08      	pop	{r3}
 8004cac:	469e      	mov	lr, r3
 8004cae:	4770      	bx	lr
